#!/bin/bash -e

# Define variables so as not to hardcode paths later.
export thisdir="$(readlink -f $(dirname $0))"
export destinationdir="$thisdir"
export sourcedir="$thisdir/sources"
export scratchdir="$thisdir/scratch"

# Clean up scratch directory, copy files there, and enter it.
# Everything will be executed from the scratch directory.
#rm -rf "$scratchdir"/*
mkdir "$scratchdir" &> /dev/null || true
cp -a "$sourcedir"/*.{tex,bib} "$scratchdir"/
cd "$scratchdir"

# If the LATEXONLY environment variable is defined, don't translate
# notebooks into LaTeX.  Otherwise translate each file in the
# notebooks/ subdirectory.
if [[ "$LATEXONLY" == "" ]]; then
    # For each notebook file in $sourcedir/notebooks/ ...
    for file in "$sourcedir"/notebooks/*.ipynb; do
        # Compute the file names we are going to work on later into
        # variables.  The renaming simply consists in changing spaces
        # and underscores into dashes, which is "friendlier" to Unix
        # and to LaTeX.
        export goodfilename="$(basename "$(echo $file | tr [:blank:] '-' \
            | tr _ '-')")"
        export goodbasename="$(basename "$goodfilename" .ipynb)"
        export goodtexname="$goodbasename.tex"
        export goodorigtexname="$goodtexname.orig"

        # If the file we are supposed to generate is newer than its
        # source then don't bother doing this slow conversion and skip
        # directly to the next file in the for loop.
        if test "$goodtexname" -nt "$file"; then
            echo No need to convert "$file"...
            continue
        fi

        # Copy the file into the scratch directory, giving it a
        # friendly name.  While copying the file from
        # "$sourcedir"/notebooks to the scratch directory, transform
        # <!--I entry --> comments into
        # VAUCANSONREPLACEMENTADDTOINDEXentryVAUCANSONREPLACEMENTCLOSEBRACE.
        # This will survive the transformation by ipython nbconvert.
        echo Converting "$file"...
        cat "$file" \
            | sed 's/<!--I\( \)*\(.*[^ ]\)\( \)*-->/VAUCANSONREPLACEMENTADDTOINDEX\2VAUCANSONREPLACEMENTCLOSEBRACE/g' \
            > "$goodfilename"

        # Use ipython nbconvert to translate the notebook into a LaTeX
        # file named $goodtexname; however ipython nbconvert is meant
        # to generate a single, whole-document PDF, not a piece of a
        # larger document.  I'll modify the output right after this to
        # make it usable for us.
        ipython nbconvert --to latex "$goodfilename" &> /dev/null

        # Split the generated LaTeX file into header and rest.  Throw
        # away the header.  Perform some easy transformations on rest,
        # commenting-out some toplevel LaTeX commands we don't want
        # such as \begin{document}, \maketitle and \end{document}, and
        # expand
        # VAUCANSONREPLACEMENTADDTOINDEXentryVAUCANSONREPLACEMENTCLOSEBRACE
        # into \index{entry}.
        mv "$goodtexname" "$goodorigtexname"
        csplit -f "$goodbasename." -q "$goodorigtexname" '/^ *\\begin{document} *$/1'
        rm "$goodbasename.00"
        cat "$goodbasename.01" \
            | sed 's/^\( \)*\\\(maketitle\|end{document}\)/% commented-out: \\\2/g' \
            | sed 's/VAUCANSONREPLACEMENTADDTOINDEX/\\index{/g' \
            | sed 's/VAUCANSONREPLACEMENTCLOSEBRACE/\}/g' \
                  >> "$goodtexname"
        rm "$goodbasename.01"
    done
fi

# At the end of the loop we have LaTeX files in the scratch directory:
# some are hand-written, some are machine-generated -- there's no
# difference.  The main file vaucanson-manual.tex can use \input to
# use any of them.


# Perform an ordinary LaTeX compilation of the main file, including
# index generation and BibTeX.  Three LaTeX passes should be enough.
# Suppress LaTeX output redirecting it into /tmp/output unless there
# is an error; if there is an error, show the file content before
# failing.
echo "Compiling the big LaTeX file: pass 1..."
rm -f vaucanson-manual.idx
pdflatex vaucanson-manual < /dev/null &> /tmp/output || (cat /tmp/output ; exit -1)
echo "Compiling the big LaTeX file: BibTeX..."
bibtex vaucanson-manual < /dev/null
echo "Compiling the big LaTeX file: makeindex..."
touch vaucanson-manual.idx
makeindex vaucanson-manual
echo "Compiling the big LaTeX file: pass 2..."
pdflatex vaucanson-manual < /dev/null &> /tmp/output || (cat /tmp/output ; exit -1)
echo "Compiling the big LaTeX file: pass 3..."
pdflatex vaucanson-manual < /dev/null &> /tmp/output || (cat /tmp/output ; exit -1)

# If we arrived here everyrhing worked.  Copy the generated PDF file
# out of the scratch directory into the manual directory.
echo "Copying the compiled PDF file..."
cp "$scratchdir"/vaucanson-manual.pdf "$destinationdir"
