# -*- mode: org -*-

* Terminology
** General

   - *MUST*

     This word, or the therms *REQUIRED* or *SHALL*, mean that the
     definition is an absolute requirement of the specification.

   - *MUST NOT*

     This phrase, or the phrase *SHALL NOT*, mean that the definition
     is an absolute prohibition of the specification.

   - *SHOULD*

     This word, or adjective *RECOMMENDED*, mean that there may exist
     valid reasons in particular circumstances when the particular
     behavior is acceptable or even useful, but the full implications
     should be understood and the case carefully weighed before
     implementing any behavior described with this label.

   - *MAY*

     This word, or the adjective *OPTIONAL*, mean that an item is
     truly optional. One vendor may choose to include the item because
     a particular marketplace requires it or because the vendor feels
     that it enhances the product while another vendor may omit the
     same item. An implementation which does not include a particular
     option *MUST* be prepared to interoperate with another
     implementation which does include the option, though perhaps with
     reduced functionality. In the same vein an implementation which
     does include a particular option *MUST* be prepared to
     interoperate with another implementation which does not include
     the option (except, of course, for the feature the option
     provides.)

** FSMXML

   Each element of the FSMXML format is described in a section with
   the following 2 parts:

*** Children

    Describes the required/allowed children of the element, their
    number of occurrences and a brief description of what they stand
    for.

*** Attributes

    The attributes of the element are listed in a table like the
    following:

#+CAPTION: Description of attributes
#+LABEL: tbl:long
#+ATTR_LaTeX: longtable align=|l|l|l|l|l|
    |-------------+------+------+---------+--------+-------------|
    | Name        | Info | Type | Default | Values | Description |
    |-------------+------+------+---------+--------+-------------|

    in which:

    - Name

      Gives the name of the attribute.

    - Info

      Give informations about the attribute:

      - Required

        The attribute is mandatory

      - Pivot

        Depending on the attribute's value, the form of the children
        should differ.

      - Unique

        When the same element can be used more than once, it means
        that one shall not declare twice the same value in each of
        those elements.

      - Valid

        Implies that the value must have already been defined
        previously in the XML document.

    - Type

      Gives the type of the value:

      - token

        Is used for a string which takes only a couple of already
        defined values, listed in the /Values/ column.

      - ID

        Is used for a string which represents an identifier, that can
        be used many times in the document to refer to the unique same
        ``concept.''

      - generator

        Is used for a string which only takes a couple of values
        (implicitly) defined in the XML document.

      - weight

        Is used for a string which only takes a couple of values
        (implicitly) defined in the XML document.

      - URI

        A /Uniform Resource Identifier (URI), is a compact string of
        characters used to identify or name a resource.

      - integer, float, string

    - Default

      Since some attributes are always required and would usually take
      the same value, a default value is possible. Omitting the
      attribute will implicitly stand for the default value.

    - Values

      When /Type/ is set to *token*, lists all the possible values
      that can take the attribute.

    - Description

      Gives a complete description of the attribute.

* FSMXML

** <FSMXML>

   The top-level /root/ element, which carries version information,
   etc. See Automaton A1, lines1 and 72 for a complete example.

   - Attributes

      |---------+------+-------+---------+--------+----------------------------------|
      | Name    | Info | Type  | Default | Values | Description                      |
      |---------+------+-------+---------+--------+----------------------------------|
      |---------+------+-------+---------+--------+----------------------------------|
      | xmlns   |      | URI   | none    |        |                                  |
      |---------+------+-------+---------+--------+----------------------------------|
      | version |      | float | none    |        | Sets the version of FSMXML used. |
      |         |      |       |         |        | This one is 1.0.                 |
      |---------+------+-------+---------+--------+----------------------------------|

   - Children

     - <regExp>, a regular expression, Occurs 0 or more times. See
       Section 4.1 for more details ; and

     - <automaton>, an automaton. Occurs 0 or more times. See Section
       5.1 for more details.
# FIXME: create real reference.

* Type

  Regular expressions and automata are described over a type, which
  can be described in the same way for both objects. In FSMXML this
  type is described by the following element:

** <valueType>

   The top-level element of the type part. See automaton A1, lines
   5-16 for a complete example.

   - Attributes

     None.

   - Children

     - <semiring>, the semiring. Occurs 1 time, is required. See
       section 3.7 for more details.

     - <monoid>, the alphabet. Occurs 1 time, is required. See section
       3.2 for more details.

** <monoid>

   Holds the description of a monoid.

   - Attributes

     |------+-----------------+-------+---------+---------------------------+---------------------|
     | Name | Info            | Type  | Default | Values                    | Description         |
     |------+-----------------+-------+---------+---------------------------+---------------------|
     |------+-----------------+-------+---------+---------------------------+---------------------|
     | type | Required, Pivot | token | none    | "unit", "free", "product" | Type of the monoid. |
     |------+-----------------+-------+---------+---------------------------+---------------------|

*** Unit Monoid

    When *type* is set to "unit", it is equivalent to the lack of
    monoids. It enables the possibility to describe valued graphs
    within the same format.

*** Free Monoid

    When *type* is set to "free", the *<monoid>* describes a free
    monoid and inherits the following new attributes and children.

    - Attributes

      |-------------+-----------+-------+---------+-------------------+------------------------|
      | Name        | Info      | Type  | Default | Values            | Description            |
      |-------------+-----------+-------+---------+-------------------+------------------------|
      |-------------+-----------+-------+---------+-------------------+------------------------|
      | genKind     | Required, | token | none    | "simple", "tuple" | Kind of the generators |
      |             | Pivot     |       |         |                   |                        |
      |-------------+-----------+-------+---------+-------------------+------------------------|
      | genDescript | Required, | token | "enum"  | "enum", "range",  | How are described the  |
      |             | Pivot     |       |         | "set"             | generators             |
      |-------------+-----------+-------+---------+-------------------+------------------------|

    - Children

      - <writingData> representation data. Occurs 0 or 1 times. See
        section 6.1.1 for more details.

**** Free Monoid with "Simple" Generators

     When *type* is set to ``free'', and *genKind* to ``simple'', the
     *<monoid>* inherits the following new attributes and
     children. See automaton A1, lines 9-15 for a complete example.

     - Attributes


       |---------+----------+-------+---------+--------------------+------------------------|
       | Name    | Info     | Type  | Default | Values             | Description            |
       |---------+----------+-------+---------+--------------------+------------------------|
       |---------+----------+-------+---------+--------------------+------------------------|
       | genSort | Required | token | none    | "letter", "digit", | Sort of the generators |
       |         |          |       |         | "integer",         |                        |
       |         |          |       |         | "alphanum"         |                        |
       |---------+----------+-------+---------+--------------------+------------------------|

     - Children

       - <monGen>, a monoid generator. Occurs 1 or more times. See
         section 3.5 for more details

**** Free Monoid with "Tuple" Generators

     When *type* is set to "free", and *genKind* to "tuple", the
     *<monoid>* inherits the following new attributes and
     children. See automaton P''2, lines 9-33 for a complete example.

     - Attributes

       |--------+----------+---------+---------+---------+------------------------|
       | Name   | Info     | Type    | Default | Values  | Description            |
       |--------+----------+---------+---------+---------+------------------------|
       |--------+----------+---------+---------+---------+------------------------|
       | genDim | Required | integer | none    | Greater | Dimension of the tuple |
       |        |          |         |         | than 1  |                        |
       |--------+----------+---------+---------+---------+------------------------|

     - Children

       - <genSort>, list of sort of generator for each "free"
         monoid. Occurs 1 time, is required. See section 3.3 for more
         details.

       - <monGen>, a monoid generator. Occurs 1 or more times. See
         section 3.5 for more details.

*** Product Monoid

    When *type* is set to "product", the *<monoid>* describes a
    product of free monoids and inherits the following new attributes
    and children. See automaton [phi]_1^-1, lines 9-26 for a complete
    example.


    - Atributes

      |---------+----------+---------+---------+----------------+--------------------------|
      | Name    | Info     | Type    | Default | Values         | Description              |
      |---------+----------+---------+---------+----------------+--------------------------|
      |---------+----------+---------+---------+----------------+--------------------------|
      | prodDim | Required | integer | none    | Greater than 1 | Dimension of the product |
      |---------+----------+---------+---------+----------------+--------------------------|


    - Children

      - <writingData>, representation data. Occurs 0 or 1 time. See
        section 6.1.2 for more details.

      - <monoid>, a free monoid. Occurs *prodDim* times. See section
        3.2.2 for more details.

** <genSort>

   Describes the sort of the generator of each item of the tuple in a
   ``free'' monoid with ``tuple'' generators. See automaton P''1, line
   13-16 for a complete example.

   - Attributes

     None.

   - Children

     - <genCompSort>, sort of an item within the generator. Occurs
       *genDim* times. See section 3.4 for more details.

** <genCompSort>

   Describes the sort of the *kth* coordinate/component in a ``tuple''
   generator, *k* being the position of the element in the list with
   *<genSort>*. See automaton P''1, lines 18-19 for a complete
   example.

   - Attributes

     |-------+----------+-------+---------+--------------------+--------------------------------|
     | Name  | Info     | Type  | Default | Values             | Description                    |
     |-------+----------+-------+---------+--------------------+--------------------------------|
     |-------+----------+-------+---------+--------------------+--------------------------------|
     | value | Required | token | none    | "letter", "digit", | Sort of a coordinate/component |
     |       |          |       |         | "integer"          | of the "tuple" generator.      |
     |-------+----------+-------+---------+--------------------+--------------------------------|

     - Children

       None.

** <monGen>

*** ``enum'' generators

    When *genDescript* is set to ``enum'', the *<monGen>* inherits the
    following new attributes.

**** ``enum'' generator of ``simple'' sort

     Describes a generator of monoid when its *genDescript* is set to
     ``enum'' and *genKind* to ``simple''. See automaton A1, lines
     13-14 for a complete example.

     - Attributes

       |-------+----------+-----------+---------+--------+-----------------------------------|
       | Name  | Info     | Type      | Default | Values | Description                       |
       |-------+----------+-----------+---------+--------+-----------------------------------|
       |-------+----------+-----------+---------+--------+-----------------------------------|
       | value | Required | generator | none    |        | Gives the value of the generator. |
       |       |          |           |         |        | Should fit *genSort* restriction  |
       |-------+----------+-----------+---------+--------+-----------------------------------|

       If used within a *<monoid>*, should also be /Unique/. If used
       within a *<monElmt>*, should also be /Valid/.

     - Children

       None.


**** ``enum'' generator of ``tuple'' sort

     Describes a generator of monoid when its *genDescript* is set to
     ``enum'' and *genKind* to ``tuple''. See automaton φ₁^{-1}, lines
     18-19 for a complete example.

     - Attributes

       |-------+----------+-----------+---------+--------+------------------------------------|
       | Name  | Info     | Type      | Default | Values | Description                        |
       |-------+----------+-----------+---------+--------+------------------------------------|
       |-------+----------+-----------+---------+--------+------------------------------------|
       | value | Required | generator | none    |        | Gives the value of the coordinate/ |
       |       |          |           |         |        | component. Should fit the          |
       |       |          |           |         |        | assocriated *genCompSort*          |
       |-------+----------+-----------+---------+--------+------------------------------------|

     - Children

       None.

** <semiring>

   Holds a semiring description.

   - Attributes

     |------+-----------------+-------+---------+-----------------------+----------------------|
     | Name | Info            | Type  | Default | Values                | Description          |
     |------+-----------------+-------+---------+-----------------------+----------------------|
     |------+-----------------+-------+---------+-----------------------+----------------------|
     | type | Required, Pivot | token | none    | "numerical", "series" | Type of the semiring |
     |------+-----------------+-------+---------+-----------------------+----------------------|

   - Children

     - <writingData>, representation data. Occurs 0 or 1 time. See
       section 6.1.2 for more details.

*** Numerical Semiring

    When *type* is set to "numerical", *<semiring>* describes a
    numerical semiring and inherits the following new attributes and
    children. See automaton A₁, lines 6-8 for a complete example.

    - Attributes

      |-----------+----------+---------------+---------+----------------+--------------------------------|
      | Name      | Info     | Type          | Default | Values         | Description                    |
      |-----------+----------+---------------+---------+----------------+--------------------------------|
      |-----------+----------+---------------+---------+----------------+--------------------------------|
      | set       | Required | token         | none    | "B", "N", "Z", | The set on which is described  |
      |           |          |               |         | "Q", "R", "C"  | the semiring.                  |
      |-----------+----------+---------------+---------+----------------+--------------------------------|
      | operation | Required | token, string | none    | "classical",   | Set the operation to work      |
      |           |          |               |         | "minPlus",     | with into the semiring.        |
      |           |          |               |         | "maxPlus"      | This is not an exhaustive list |
      |-----------+----------+---------------+---------+----------------+--------------------------------|

    - Children

      None.

*** Series Semiring

    When *type* is set to ``series'', the *<semiring>* describes a
    series semiring and inherits the following new attributes and
    children. See automaton D₂ (bis), lines 6-19 for a complete
    example.

    - Attributes

      None.

    - Children

      - <semiring>, a semiring. Occurs 1 time. See section 3.7 for
        more details.

      - <monoid>, a monoid. Occurs 1 time. See section 3.2 for more
        details.

* Regular EXpressions

** <regExp>

   Holds the complete representation of a regular expression. See a
   rational expression for |C₁| = (a+x)*(b·(2a+2b)*), lines 4-52 for a
   complete example.

   - Attributes

     None.

   - Children

     - <valueType>, the regular expression's type. Occurs 1 time. See
       section 3.1 for more details

     - <typedRegExp>, the regular expression's body. Occurs 1
       times. See section 4.2 for more details.

** <typeRegExp>

   Holds the type regular expression. See a rational expression
   for |C₁| = (a+b)*(b·(2a+2a+2b)*), lines 18-50 for a complete
   example.

*** <sum>

    Sum of two expressions

    - Attributes

      None.

    - Children

      - Left typed regular expression. Occurs 1 time. See section 4.3
        for more details

      - Right typed regular expression. Occurs 1 time. See section 4.3
        for more details.

*** <product>

    Product of two expressions.

    - Attributes

      None.

    - Children

      - Left typed regular expression. Occurs 1 time. See section 4.3
        for more details

      - Right typed regular expression. Occurs 1 time. See section 4.3
        for more details

*** <star>

    Star of an expression.

    - Attributes

      None.

    - Children

      - Typed regular expression to starify. Occurs 1 time. See
        section 4.3 more details

*** <rightExtMul> and <leftExtMul>

    Represents the right/left scalar multiplication of an expression.

    - Attributes

      None.

    - Children

      - <weight>, weight for the multiplication. Occurs 1 time. See
        section 4.4 for more details.

      - Typed regular expression to multiply. Occurs 1 time. See
        section 4.3 for more details.

*** <monElmt>

    Represents a monoid element, which is a concatenation of monoid
    generators.


**** On a Free Monoid

     Represents a monoid element on a free monoid. See automaton A₁,
     lines 26-28 for a complete example.

     - Attributes

       Nones.

     - Children

       - <monGen>, a monoid generator. Occurs as many time as
         wanted. See section 3.5 for more details.

**** On a Product Monoid

     Represents a monoid element on a product monoid. See automaton
     φ₁^{-1}, lines 35-42 for a complete example.

     - Attributes

       None.

     - Children

       - <monElmt> or <one>, a monoid element or the identity ofr a
         *free* monoid. Occurs *prodDim* times. See paragraph 4.3.5.1
         and section 4.3.7 for more details.

*** <zero>

    Represents the null series.

    - Attributes

      None.

    - Children

      None.

*** <one>

    Represents the identity series or the identity symbol of a *free*
    monoid.

    - Attributes

      None.

    - Children

      None.

** <weight>

   Represents the weight of an expression.

*** On a Numerical Semiring

    Represents the weight of an expression with a numerical
    semiring. See automaton C₁, lines 47-47 for a complete example.

    - Attributes

      |-------+----------+--------+---------+--------+----------------|
      | Name  | Info     | Type   | Default | Values | Description    |
      |-------+----------+--------+---------+--------+----------------|
      |-------+----------+--------+---------+--------+----------------|
      | value | Required | weight | none    |        | Weight's value |
      |-------+----------+--------+---------+--------+----------------|

    - Children

      None.

*** On a Series Semiring

    Represents the weight of an expression with a series semiring. See
    automaton D₂ (bis), lines 29-43 for a complete example.


    - Attributes

      None.

    - Children

      - Typed regular expression taken into the semiring. Occurs 1
        time. See section 4.3 for more details

* Automata

** <automaton>

   Holds the complete representation of an automaton.. See automaton
   A₁, lines 4-70 for a complete example.

   - Attributes

     |------------+------+--------+---------+-----------------+------------------------------------|
     | Name       | Info | Type   | Default | Values          | Description                        |
     |------------+------+--------+---------+-----------------+------------------------------------|
     |------------+------+--------+---------+-----------------+------------------------------------|
     | name       |      | string |         |                 | Name of the automaton              |
     |------------+------+--------+---------+-----------------+------------------------------------|
     | readingDir |      | token  | left    | "left", "right" | Reading direction of the automaton |
     |------------+------+--------+---------+-----------------+------------------------------------|

   - Children

     - <geometricData>, The automaton's geometry data. Occurs 0 or 1
       time. See section 6.2.1 for more details

     - <drawingData>, the automaton's drawing data. Occurs 0 or 1
       time. See section 6.3 for more details.

     - <valueType>, the automaton's type. Occurs 1 time. See section
       3.1 for more details.

     - <automatonStruct>, the automaton's content. Occurs 1 time. see
       section 5.2 for more details.

** <automatonStruct>

   Holds the automaton's content. See automaton A₁, lines 17-69 for a
   complete example.

   - Attributes

     None.

   - Children

     - <states>, lists the automaton's states. Occurs 1 time. See
       section 5.3 for more details.

     - <transitions>, lists the automaton's transitinos. Occurs 1
       time. See section 5.5 for more details.

** <states>

   Holds the automaton's states. See automaton A₁, lines 18-22 for a
   complete example.

   - Attributes

     None.

   - Children

     - <state>, adds a state. Occurs 0 or more times. See section 5.4
       for more details.

** <state>

   Describes a state, *key* is usually used to define in which order
   should be processed the states. *name* allows you to give a more
   explicit name. See automaton A₁, lines 19-21 for a complete
   example.

   - Attributes

     |------+------------------+---------+---------+------------------+---------------------------|
     | Name | Info             | Type    | Default | Values           | Description               |
     |------+------------------+---------+---------+------------------+---------------------------|
     |------+------------------+---------+---------+------------------+---------------------------|
     | id   | Required, Unique | ID      | none    |                  | Id of the state           |
     |------+------------------+---------+---------+------------------+---------------------------|
     | key  |                  | integer | 0       | Positive integer | Possible key of the state |
     |------+------------------+---------+---------+------------------+---------------------------|
     | name |                  | string  | none    |                  | Name of the state         |
     |------+------------------+---------+---------+------------------+---------------------------|

   - Children

     - <geometricData>, adds geometry data. Occurs 0 or 1 time. See
       sectino 6.2.2 for more details.

     - <drawingData>, adds drawing data. Occurs 0 or 1 time. See
       section 6.3 for more details.

** <transitions>

   Holds the automaton's transitions and initial/final properties of
   states. See automaton A₁, lines 23-68 for a complete example.

   - Attributes

     None.

   - Children

     - <transition>, adds a transition. Occurs 0 or more times. See
       section 5.6 for more details.

     - <initial>, adds the initial property to a state. Occurs 0 or
       more times. See section 5.7 for more details.

     - <final>, adds the final property to a state. Occurs 0 or more
       times. See section 5.7 for more details.

** <transition>

   Describes a transition. See automaton A₁, lines 24-30 for a
   complete example.

   - Attributes

     |--------+----------+------+---------+----------+--------------------------|
     | Name   | Info     | Type | Default | Values   | Description              |
     |--------+----------+------+---------+----------+--------------------------|
     |--------+----------+------+---------+----------+--------------------------|
     | source | Required | ID   | none    | Valid ID | Source of the transition |
     |--------+----------+------+---------+----------+--------------------------|
     | target | Required | ID   | none    | Valid ID | Target of the transition |
     |--------+----------+------+---------+----------+--------------------------|

   - Children

     - <label>, label of the transition. Occurs 1 time. See section
       5.8 for more details.

     - <geometricData>, adds geometry data. Occurs 0 or 1 time. See
       section 6.2.3 for more details.

     - <drawingData>, adds drawing data. Occurs 0 or 1 time. See
       section 6.3 for more details.

** <initial> and <final>

   Adds the initial/final property to a state. See automaton A₁, lines
   66-67 for a complete example

   - Attributes

     |-------+----------+------+---------+----------+------------------------------------------|
     | Name  | Info     | Type | Default | Values   | Description                              |
     |-------+----------+------+---------+----------+------------------------------------------|
     |-------+----------+------+---------+----------+------------------------------------------|
     | state | Required | ID   | none    | Valid ID | State to give the initial/final property |
     |-------+----------+------+---------+----------+------------------------------------------|

   - Children

     - <label>, labl of the transition. Occurs 1 time. See section 5.8
       for more details.

     - <geometricData>, adds geometry data. Occurs 0 or 1 time. See
       section 6.2 for more details.

     - <drawingData>, adds drawing data. Occurs 0 or 1 time. See
       section 6.3 for more details.

** <label>

   Holds the label of a transition. See automaton A₁, lines 25-29 for
   a complete example.


   - Attributes

     None.

   - Children

     - Typed regular expression. Occurs 1 time. See section 4.3 for
       more details.

* Automaton's Optional Properties

** <writingData>

   Stores informations that might be useful for input/output.

*** For Monoid

    - Attributes

      |----------------+------+--------+---------+--------+------------------------------------|
      | Name           | Info | Type   | Default | Values | Description                        |
      |----------------+------+--------+---------+--------+------------------------------------|
      |----------------+------+--------+---------+--------+------------------------------------|
      | identitySymbol |      | string |         |        | How to display the monoid identity |
      |----------------+------+--------+---------+--------+------------------------------------|

    - Children

      None.

*** For Semiring

    - Attributes

      |----------------+------+--------+---------+--------+--------------------------------------|
      | Name           | Info | Type   | Default | Values | Description                          |
      |----------------+------+--------+---------+--------+--------------------------------------|
      |----------------+------+--------+---------+--------+--------------------------------------|
      | identitySymbol |      | string |         |        | How to display the semiring identity |
      |----------------+------+--------+---------+--------+--------------------------------------|
      | zeroSymbol     |      | string |         |        | How to display the semiring zero     |
      |----------------+------+--------+---------+--------+--------------------------------------|

    - Children

      None.

** <geometricData>

   Stores information on geometric representation.

*** For Automaton

    - Attributes

      |------+------+-------+---------+--------+--------------------------------------|
      | Name | Info | Type  | Default | Values | Description                          |
      |------+------+-------+---------+--------+--------------------------------------|
      |------+------+-------+---------+--------+--------------------------------------|
      | x    |      | float |         |        | Gives the relative horizontal origin |
      |------+------+-------+---------+--------+--------------------------------------|
      | y    |      | float |         |        | Gives the relative vertical origin   |
      |------+------+-------+---------+--------+--------------------------------------|

    - Children

      None.

*** For States

    - Attributes

      |------+------+-------+---------+--------+---------------------------------|
      | Name | Info | Type  | Default | Values | Description                     |
      |------+------+-------+---------+--------+---------------------------------|
      |------+------+-------+---------+--------+---------------------------------|
      | x    |      | float |         |        | Gives state horizontal position |
      |------+------+-------+---------+--------+---------------------------------|
      | y    |      | float |         |        | Gives state vertical position   |
      |------+------+-------+---------+--------+---------------------------------|

    - Children

      None.

*** For the Transitions

    - Attributes

      |----------------+-------+---------+---------+-------------------+----------------------------|
      | Name           | Info  | Type    | Default | Values            | Description                |
      |----------------+-------+---------+---------+-------------------+----------------------------|
      |----------------+-------+---------+---------+-------------------+----------------------------|
      | TransitionType | Pivot | token   | none    | "EdgeL", "EdgeR", | The type of the transition |
      |                |       |         |         | "ArcL", "ArcR",   |                            |
      |                |       |         |         | "Loop"            |                            |
      |----------------+-------+---------+---------+-------------------+----------------------------|
      | loopDir        |       | integer |         | Between 0         | Only available if "Loop"   |
      |                |       |         |         | and 360           | is set. The angle of the   |
      |                |       |         |         |                   | loop direction             |
      |----------------+-------+---------+---------+-------------------+----------------------------|
      | labelPos       |       | float   |         | Between 0         | Position of the label on   |
      |                |       |         |         | and 100           | the arrow. 0 is the        |
      |                |       |         |         |                   | source, 100 the target     |
      |----------------+-------+---------+---------+-------------------+----------------------------|
      | labelDist      |       | float   |         | Greater than 0    | Distance between the       |
      |                |       |         |         |                   | arrow and the label        |
      |----------------+-------+---------+---------+-------------------+----------------------------|

    - Children

      None.

*** For Initial States

    - Attributes

      |------------+------+---------+---------+-------------------+------------------------------|
      | Name       | Info | Type    | Default | Values            | Description                  |
      |------------+------+---------+---------+-------------------+------------------------------|
      |------------+------+---------+---------+-------------------+------------------------------|
      | initialDir |      | integer |         | Between 0 and 360 | The angle of the input arrow |
      |------------+------+---------+---------+-------------------+------------------------------|
      | labelPos   |      | float   |         | Between 0 and 100 | Position of the label on the |
      |            |      |         |         |                   | arrow. 0 is the source, 100  |
      |            |      |         |         |                   | the target.                  |
      |------------+------+---------+---------+-------------------+------------------------------|
      | labelDist  |      | float   |         | Greater than 0    | Distance between the arrow   |
      |            |      |         |         |                   | and the label                |
      |------------+------+---------+---------+-------------------+------------------------------|

    - Children

      None.

*** For Final States

    - Attributes

      |-----------+------+---------+---------+-------------------+-----------------------------------|
      | Name      | Info | Type    | Default | Values            | Description                       |
      |-----------+------+---------+---------+-------------------+-----------------------------------|
      |-----------+------+---------+---------+-------------------+-----------------------------------|
      | finalDir  |      | integer |         | Between 0 and 360 | The angle of the output arrow     |
      |-----------+------+---------+---------+-------------------+-----------------------------------|
      | finalMod  |      | token   |         | "circle", "arrow" | How should be represented a final |
      |           |      |         |         |                   | state                             |
      |-----------+------+---------+---------+-------------------+-----------------------------------|
      | labelPos  |      | float   |         | Between 0 and 100 | Position of the label on          |
      |           |      |         |         |                   | the arrow. 0 is the source,       |
      |           |      |         |         |                   | 100 the target                    |
      |-----------+------+---------+---------+-------------------+-----------------------------------|
      | labelDist |      | float   |         | Greater than 0    | Distance between the arrow and    |
      |           |      |         |         |                   | the label                         |
      |-----------+------+---------+---------+-------------------+-----------------------------------|

    - Children

      None.

** <drawingData>

   Soon specified.


