#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# pylint: disable=global-statement

import argparse
import math
import multiprocessing
import os
import re
import subprocess
import sys
import time
import timeit
import warnings

import vcsn


def git_describe():
    b = subprocess.check_output(
        ['git', 'describe', '--first-parent', '--long', '--dirty'])
    res = b.decode('utf-8').strip()
    # v2.9-41-gf6bb8af2 -> v2.9-041-gf6bb8af2.
    res = re.sub(r'-(\d+)-g',
                 lambda m: '-{:03}-g'.format(int(m.group(1))),
                 res)
    return res


def getargs():
    p = argparse.ArgumentParser(description='Bench some algorithms.')
    opt = p.add_argument
    opt('-O', '--only', metavar='RE', type=re.compile, default='.*',
        help='run only benches whose title is matched by RE')
    opt('-j', '--jobs', metavar='NUM', type=int, default='0',
        help='''number of benches to run concurrently.  Pass 0 to
        avoid using any Thread.''')
    opt('-r', '--repeat', metavar='NUM', type=int, default='3',
        help='''number runs to perform, the best of which being kept.  The higher,
        the more stable the results are expected to be.  Pass 0 to run
        only the set-up parts; this is useful to warm up the plugin
        cache (ccache).''')
    opt('-v', '--verbose', action='store_true', help='be verbose')
    opt('--check', action='store_true',
        help='''run scaled down versions of the benchmarks.  Implies -r 1.  Very
        useful with `-j` to warn the algorithm cache.  Do not use it
        to record actual benchmarks.''')
    opt('-l', '--list', action='store_true', help='list of benches cases')
    opt('-s', '--sort', action='store_true', help='sort benches by name')
    opt('-o', '--output', metavar='FILE',
        help='''also save the result in `FILE`''')
    opt('-d', '--dir', metavar='DIR',
        help='''also print the result in `DIR/DESC` where DESC is the
        result of `git describe`''')
    res = p.parse_args()

    if res.dir is not None and res.output is not None:
        raise RuntimeError('--dir and --output cannot be used together')

    # Implement --dir/--output.
    res.out = None
    if res.dir is not None:
        res.output = os.path.join(res.dir, git_describe())
    if res.output is not None:
        res.out = open(res.output, 'w')

    return res

args = getargs()

if '-DNDEBUG' not in ' '.join([vcsn.config('configuration.cppflags'),
                               vcsn.config('configuration.cxxflags')]):
    warnings.warn('not compiled with -DNDEBUG, benches are irrelevant')
if '-O3' not in vcsn.config('configuration.cxxflags'):
    warnings.warn('not compiled with -O3, benches are irrelevant')
if args.check:
    warnings.warn('run with --check, benches are irrelevant')

# The number of failures
nfail = 0


def downsize(statement):
    'Replace size identifiers with 1.'
    # Examples of numbers not to match:
    # - lal, f2
    # - lal(A-Z0-9), ...
    # - a2 = ...
    return re.sub(r'(?<![-a-zA-Z])\d+', '1', statement)


def log(*logs):
    'Print logs to stderr.'
    if args.verbose:
        print(*logs, file=sys.stderr)


def comment(title, lines):
    'Output metadata to the output file.'
    lines = re.sub('^', '# {}: '.format(title), lines.rstrip(), flags=re.M)
    print(lines, flush=True, file=args.out)


# Number of the next bench report.  Because we are using a process
# pool (not a thread pool), we can't just use some simple global.
#
# We use processes, not threads, because the GIL is locked when we go
# into C++ code, so there is no parallelism at all with threads.
#
# We could have a `Bench.number` counter, but we are interested in a
# "progress bar", so what matters is the complete benches, not the
# order in which they are run.
count = multiprocessing.Value('i', 1)

# List of benches to run.
benches = []


def output(s):
    'Print to stdout and possibly output file.'
    global count
    with count.get_lock():
        c = count.value
        count.value += 1
    nbenches = len(benches)
    width = int(math.log10(nbenches) + 1) if benches else 1
    print('{:{}}/{:{}}'.format(c, width, nbenches, width),
          s, flush=True)
    if args.out is not None:
        print(s, flush=True, file=args.out)


def bench(stmt, comment, title=None, setup=None, number=1):
    'Report the best timing of three batches of number runs of cmd.'
    if title is None:
        title = stmt
    if setup is None:
        setup = ['pass']

    if not isinstance(setup, list):
        setup = [setup]

    if args.only.search(title + ' # ' + comment):
        benches.append(Bench(stmt, comment, title, setup, number))


class Bench:
    # pylint: disable=too-many-arguments

    def __init__(self, stmt, comment, title, setup, number):
        self.__stmt_orig = stmt
        self.__setup_orig = setup
        if args.check:
            number = 1
            args.repeat = 1
            stmt = downsize(stmt)
            comment = downsize(comment)
            title = downsize(title)
            setup = [downsize(s) for s in setup]

        self.__stmt = stmt
        self.__comment = comment
        self.__title = title
        self.__setup = setup
        self.__number = number

        if 1 < self.__number:
            self.__comment += ', {}x'.format(self.__number)

    def log(self, cmd, ocmd):
        'Report that we run `cmd` (originally `ocmd`).'
        if args.check and cmd != ocmd:
            log('run: {:27s} (was: {})'.format(cmd, ocmd))
        else:
            log('run:', cmd)

    @property
    def title(self):
        return '{:23s} # {}'.format(self.__title, self.__comment)

    def run(self):
        log('Bench.run: {}'.format(self.title))
        env = {
            'vcsn': vcsn,
            'b': vcsn.context('[abc] -> B'),
        }
        try:
            for i, s in enumerate(self.__setup):
                self.log(s, self.__setup_orig[i])
                exec(s, globals(), env)  # pylint: disable=exec-used

            self.log(self.__stmt, self.__stmt_orig)
            if args.repeat:
                t = min(timeit.repeat(self.__stmt, number=self.__number,
                                      repeat=args.repeat, globals=env))
                t = '{:5.2f}s'.format(t)
            else:
                # Just run the set up, the user is just warming ccache
                # by running the setups.
                t = 'SKIP'
            err = None
        except RuntimeError as exc:
            t = ' FAIL'
            err = exc
            global nfail
            nfail += 1
        output('{:7s}: {}'.format(t, self.title))
        if err:
            print(err, file=sys.stderr)


# Check the cost of dyn calls.
#
# We used to check a call to "b.format('text')", but that makes us too
# sensitive to the cost of the formatting itself.  Any operation can
# hardly be simpler than `automaton.is_proper`, which just returns
# "true" for a free automaton.  So this does measure the pure speed of
# our interface with Python, and dispatch.
#
# To check the cost of the dispatch, it must be done in C++.
#
# FWIW:
#
# %timeit a.is_empty()
# 1000000 loops, best of 3: 1.03 µs per loop
#
# %timeit a.proper()
# 10000 loops, best of 3: 62.8 µs per loop
#
# %timeit a.is_proper()
# 1000000 loops, best of 3: 1 µs per loop
#
# So really, is_proper looks the right tool.
bench('a.is_proper()',
      'a = ""',
      setup='''a = vcsn.automaton('', 'daut')''',
      number=1000000)

# Check formatting.  was used to check dyn:: round-trip.
bench('b.format("text")',
      'b = [abc] -> B',
      number=100000)

# I/O on expressions.
e = '[ab]{20000}'
bench('b.expression(e)',
      'e = {}'.format(e),
      setup='e = "{}"'.format(e),
      number=1000)

e = r'"(\e+a)" * 500'
bench('b.expression(e)',
      'e = {}'.format(e),
      setup='e = {}'.format(e),
      number=100)

e = r'"(\e+a)" * 500'
bench('r.format("text")',
      'r = b.expression({})'.format(e),
      setup=['e = {}'.format(e),
             'r = b.expression(e)'],
      number=1000)

# Output should be fast.
r = 'a?{500}'
for fmt in ['daut', 'dot', 'efsm', 'fado', 'grail', 'tikz']:
    bench('a.format("{}")'.format(fmt),
          'a = std({})'.format(r),
          setup=['r = "{}"'.format(r),
                 'a = b.expression(r).standard()'],
          number=5)

# Input should be too.
r = 'a?{500}'
for fmt, number in [('daut', 5), ('dot', 1), ('efsm', 5), ('fado', 5)]:
    bench('vcsn.automaton(a, "{}")'.format(fmt),
          's = {}(std({}))'.format(fmt, r),
          'read(s)',
          setup=['r = "{}"'.format(r),
                 'a = b.expression(r).standard().format("{}")'.format(fmt)],
          number=number)

## -------------- ##
## derived_term.  ##
## -------------- ##


def bench_derived_term(alphabet, exp, algo, number):
    ctx = "[{}] -> Z".format(alphabet)
    cmd = 'r.derived_term("{}")'.format(algo)
    if 'lazy' in algo:
        # Accessible resolves the lazy states.
        cmd = cmd + '.accessible()'
    bench(cmd,
          'r = {}, c = {}'.format(exp, ctx),
          setup=['ctx = "{}"'.format(ctx),
                 'e = "{}"'.format(exp),
                 'c = vcsn.context(ctx)',
                 'r = c.expression(e)'],
          number=number)


def bench_dt(alphabet, size, algo, number):
    bench_derived_term(alphabet,
                       "(a+b)*b(<2>a+<2>b){{{}}}".format(size),
                       algo,
                       number=number)

bench_dt('ab',  150, 'derivation', 50)
bench_dt('a-z', 150, 'derivation', 50)
bench_dt('a-z', 150, 'expansion',  50)
bench_dt('ab',  300, 'derivation', 20)
bench_dt('a-z', 300, 'derivation', 20)
bench_dt('a-z', 300, 'expansion',  20)
bench_dt('a-z', 300, 'lazy,expansion',  20)

# Measure the cost of a lazy construction.
bench_dt('a-z', 3, 'expansion', 10000)
bench_dt('a-z', 3, 'lazy,expansion', 10000)

bench_derived_term('a', 'a?{150}', 'derivation', 2)
bench_derived_term('a', 'a?{150}', 'expansion',  2)
bench_derived_term('a', 'a?{150}', 'lazy,expansion',  2)

# standard
ctx = '[a-z] -> Z'
e = "(a+b)*b(<2>a+<2>b){20000}"
bench('r.standard()',
      'r = {}, c = {}'.format(e, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'e = "{}"'.format(e),
             'r = vcsn.context(ctx).expression(e)'],
      number=10)

# thompson
ctx = '[a-z] -> Z'
bench('r.thompson()',
      'r = {}, c = {}'.format(e, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'e = "{}"'.format(e),
             'r = vcsn.context(ctx).expression(e)'],
      number=10)


## ------------- ##
## Determinize.  ##
## ------------- ##

# These are the well known worst cases.  21 is too long, slowly moving
# to use 18 as reference.
for n in [18, 21]:
    bench('a.determinize()',
          'a = ladybird({})'.format(n),
          setup=['n = {}'.format(n),
                 'c = vcsn.context("[abc] -> B")',
                 'a = c.ladybird(n)'])
n = 15
bench('a.is_deterministic()',
      'a = ladybird({}).determinize()'.format(n),
      setup=['n = {}'.format(n),
             'c = vcsn.context("[abc] -> B")',
             'a = c.ladybird(n).determinize()'],
      number=1000000)

# In the case of 18, check that we scale well with the size of the
# (context's) alphabet.
n = 18
ctx = '[a-zA-Z0-9] -> B'
bench('a.determinize()',
      'a = ladybird({}), c = {}'.format(n, ctx),
      setup=['n = {}'.format(n),
             'c = vcsn.context("{}")'.format(ctx),
             'a = c.ladybird(n)'])

# See how boolean vs. weighted determinization goes.
for n, algo, number in [(13, '', 20), (13, '"weighted"', 5),
                        (14, '', 10), (14, '"weighted"', 5),
                        (16, '', 2),  (16, '"weighted"', 1)]:
    for ws in ['B', 'F2']:
        ctx = '[abc] -> ' + ws
        bench('a.determinize({})'.format(algo),
              'a = de_bruijn({}), c = {}'.format(n, ctx),
              setup=['c = vcsn.context("{}")'.format(ctx),
                     'n = {}'.format(n),
                     'a = c.de_bruijn(n)'],
              number=number)

# Check the cost of laziness.
n = 13
bench('a.determinize("lazy,weighted").accessible()',
      'a = de_bruijn({}), c = {}'.format(n, ctx),
      setup=['c = vcsn.context("{}")'.format(ctx),
             'n = {}'.format(n),
             'a = c.de_bruijn(n)'],
      number=5)

# Something more realistic: the previous automata explode in an
# exponential number of states, and half of them end up being final.
# This exagerates the importance of the handling of the final states.
#
# The following bench tries to be more realistic (i.e., more NLP
# like): the automata are almost deterministic (and easy to
# determinize), are "wide", and have few final states.
n = 100
ctx = '[a-zA-Z0-9] -> B'
r = '([^]+a){{{}}}'.format(n)
for algo in ['', '"weighted"', '"lazy,weighted"']:
    cmd = 'a.determinize({})'.format(algo)
    if 'lazy' in algo:
        # Accessible resolves the lazy states.
        cmd = cmd + '.accessible()'
    bench(cmd,
          'a = std({}), c = {}'.format(r, ctx),
          setup=['r = "{}"'.format(r),
                 'c = vcsn.context("{}")'.format(ctx),
                 'a = c.expression(r).standard()'],
          number=2)


## ---------- ##
## evaluate.  ##
## ---------- ##

n = 150
# Many many states active concurrently.
# too slow: a = b.expression('(a+b)*a(a+b){{{n}}}).derived_term()
bench('a.evaluate("a"*{})'.format(n + 1),
      'a = de_bruijn({})'.format(n),
      setup=['n = {}'.format(n),
             'a = b.de_bruijn(n)'],
      number=10000)
# Something less wide.
for ctx, number in [('[a-z] -> Z', 20000),
                    ('[a-z]* -> Z', 10000)]:
    n = 25
    r = '[a-z]*'
    bench('a.evaluate("abcxyz"*{})'.format(n),
          'a = std({}), c = {}'.format(r, ctx),
          setup=['c = vcsn.context("{}")'.format(ctx),
                 'r = c.expression("{}")'.format(r),
                 'a = r.standard()'],
          number=number)

    bench('a.evaluate(wc.polynomial("abcxyz"*{}))'.format(n),
          'a = std({}), c = {}'.format(r, ctx),
          setup=['c = vcsn.context("{}")'.format(ctx),
                 'r = c.expression("{}")'.format(r),
                 'a = r.standard()',
                 'exp = "abcxyz"*{}'.format(n),
                 'wc = c.word_context()'],
          number=number)

## ---------- ##
## shortest.  ##
## ---------- ##

n = 9
# too slow: a = b.expression('(a+b)*a(a+b){{{n}}}).derived_term()
bench('a.shortest(5)',
      'a = de_bruijn({})'.format(n),
      setup=['n = {}'.format(n),
             'a = b.de_bruijn(n)'],
      number=10)

bench('a.shortest(5000)',
      'a = de_bruijn({})'.format(n),
      setup=['n = {}'.format(n),
             'a = b.de_bruijn(n)'],
      number=10)

ctx = '[a-e] -> Z'
r = "[a-e]?{600}"
bench('a.shortest(5)',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).standard()'],
      number=5)

ctx = '[a]x[x] -> Q'
r = r'(\e|x + a|\e)*'
bench('a.shortest(5000)',
      'a = derived_term({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).derived_term().strip()'],
      number=10)

# FIXME: restore once issue #99 is fixed.
# ctx = '[a-e] -> Z'
# r = "[a-e]{10000}"
# bench('a.shortest()',
#       'a = std({}), c = {}'.format(r, ctx),
#       setup=['c = vcsn.context(ctx)',
#              'r = "{}"'.format(r),
#              'a = c.expression(r).standard()'])

## ---------- ##
## lightest.  ##
## ---------- ##

# lightest
ctx = '[a-e] -> Nmin'
r = "[a-e]?{150}"
for algo, number in [('auto', 10), ('yen', 500), ('eppstein', 500)]:
    bench('a.lightest(5, "{}")'.format(algo),
          'a = std({}), c = {}'.format(r, ctx),
          setup=['ctx = "{}"'.format(ctx),
                 'c = vcsn.context(ctx)',
                 'r = "{}"'.format(r),
                 'a = c.expression(r).standard()'],
          number=number)

# Building [a-z]?{300} is really time-consuming.  Make more iterations
# instead.
ctx = '[a-e] -> Nmin'
bench('a.lightest()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).standard()'],
      number=500)

ctx = '[a]x[x] -> Q'
r = r'(\e|x + a|\e)*'
bench('a.lightest(5000)',
      'a = derived_term({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).derived_term().strip()'],
      number=10)

# lightest-automaton.
ctx = '[a-e] -> Nmin'
r = "[a-e]?{150}"
for algo, number in [('a-star', 20), ('bellman-ford', 1), ('dijkstra', 500)]:
    bench('a.lightest_automaton(1, "{}")'.format(algo),
          'a = std({}), c = {}'.format(r, ctx),
          setup=['ctx = "{}"'.format(ctx),
                 'c = vcsn.context(ctx)',
                 'r = "{}"'.format(r),
                 'a = c.expression(r).standard()'],
          number=number)

# sort.
ctx = "[a-e] -> Z"
r = "[a-e]?{700}"
bench('a.sort()',
      'a = std({})'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).standard()'])

# split.
ctx = "[a-e] -> Q"
e = "[a-e]?{15}"
bench('e.split()',
      'e = {}'.format(e),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'e = c.expression("{}")'.format(e)])

# proper.
r = "a?{1200}"
bench('a.proper()',
      'a = thompson({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a] -> B").expression(r).thompson()'])

# to-expression.
bench('a.expression("associative", "delgado")',
      'a = ladybird(2000)',
      setup=['a = vcsn.context("[abc] -> B").ladybird(2000)'],
      number=10)

r = '[a-d]?{100}'
bench('a.expression("associative", "naive")',
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-d] -> B").expression(r).standard()'])

bench('a.expression("associative", "naive")',
      'a = ladybird(8000)',
      setup=['a = vcsn.context("[abc] -> B").ladybird(8000)'],
      number=10)

r = '[a-d]?{15}'
bench('a.expression("linear", "delgado")',
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-d] -> B").expression(r).standard()'],
      number=5)

bench('a.expression("linear", "delgado")',
      'a = ladybird(2000)',
      setup=['a = vcsn.context("[abc] -> B").ladybird(2000)'],
      number=5)

r = '[a-d]?{9}'
bench('a.expression("linear", "naive")',
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-d] -> B").expression(r).standard()'],
      number=5)


bench('a.expression("linear", "naive")',
      'a = ladybird(4000)',
      setup=['a = vcsn.context("[abc] -> B").ladybird(4000)'],
      number=2)

# Other conjunction and power testcases, with more outgoing transitions
# per state.  This stresses much better the new conjunction algorithm.
# The very narrow automaton, a{200000}, highlights the cost of the
# possible spontaneous transitions for lan.
for r in ['[a-e]?{50}', 'a{200000}']:
    bench('a.conjunction(a)',
          'a = std({})'.format(r),
          setup=['r = "{}"'.format(r),
                 'a = vcsn.context("[a-e] -> Z").expression(r).standard()'])

r = '[a-e]?{50}'
bench('a.shuffle(a)',
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-e] -> Z").expression(r).standard()'])

# infiltrate.
r = "[a-e]?{30}"
bench('a.infiltrate(a)',
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-e] -> Z").expression(r).standard()'])

# Conjunction with spontaneous transitions.
r = "[a-e]?{80}"
bench('a.conjunction(a)',
      'a = thompson({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-e] -> Z").expression(r).thompson()'])

r = "[a-e]?{5}"
bench('a.conjunction(a, a, a)',
      'a = thompson({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-e] -> Z").expression(r).thompson()'])

# power.
n = 12
r = "[a-e]*b(<2>[a-e])*"
bench('a & {}'.format(n),
      'a = std({})'.format(r),
      setup=['r = "{}"'.format(r),
             'a = vcsn.context("[a-e] -> Z").expression(r).standard()'])

# compose.
ctx = "[a-z] x [a-z] -> B"
r = "([a-z]|[a-z])?{20}"
bench('a.compose(a2)',
      'a2 = std({}), a = std(a|a)'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'c = vcsn.context(ctx)',
             'a = c.expression("a|a").standard()',
             'a2 = c.expression(r).automaton()'],
      number=50)


def bench_compose(r, a, number=50):
    ctx = '[a-z]x[a-z] -> B'
    algo = {'std': 'standard', 'thm': 'thompson'}[a]
    bench('a.compose(a)',
          'a = {}({}), c = {}'.format(a, r, ctx),
          setup=['ctx = "{}"'.format(ctx),
                 'r = "{}"'.format(r),
                 'c = vcsn.context(ctx)',
                 'a = c.expression(r).{}()'.format(algo)],
          number=number)

# Those two are obsolete, remove them in some future.  They are
# irrelevant (this pattern does not exist in "real life", and
# extremely costly to run.  Besides, commit f893b2f1 changed the
# meaning of this expression when in LAN (see #119).
r = "['(a,a)'-'(i,z)']{4}"
bench_compose(r, 'std', 1)
# bench_compose(r, 'thm', 2)

r = '((a|b+b|c+c|d+d|a)(w|x+x|y+y|z+z|w)){300}'
bench_compose(r, 'std')
bench_compose(r, 'thm', 20)
r = r'((\e|a+a|b+b|c+c|d+d|a)(w|x+x|y+y|z+z|w+z|\e)){300}'
bench_compose(r, 'std', 20)
bench_compose(r, 'thm', 10)

# automaton.has_bounded_lag.
ctx = "[abc]x[xyz] -> B"
r1 = "['(a,x)'-'(b,y)']{1000}*"
r2 = "(a|x+a|y+a|z+b|x+b|y){1000}*"
bench('a.has_bounded_lag()',
      'a = std({})'.format(r1),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r2),
             'c = vcsn.context(ctx)',
             'a = c.expression(r).standard()'],
      number=10)
ctx = "[abc]x[xyz] -> B"
r1 = "['(a,x)'-'(b,y)']*{600}"
r2 = "(a|x+a|y+a|z+b|x+b|y)*{600}"
bench('a.has_bounded_lag()',
      'a = std({})'.format(r1),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r2),
             'c = vcsn.context(ctx)',
             'a = c.expression(r).standard()'],
      number=20)

# Minimize.
def bench_minimize(ws, algo, number=1):
    ctx = '[a-k] -> ' + ws
    r = '[a-g]{300}'
    bench('a.minimize("{}")'.format(algo),
          'a = std({}), c = {}'.format(r, ctx),
          setup=['c = vcsn.context("{}")'.format(ctx),
                 'r = c.expression("{}")'.format(r),
                 'a = r.standard()'],
          number=number)
bench_minimize('B', 'brzozowski', 200)
bench_minimize('B', 'hopcroft',  2)
bench_minimize('B', 'moore',    40)
bench_minimize('B', 'signature', 2)
bench_minimize('B', 'weighted')
bench_minimize('Z', 'weighted')


# reduce.
ctx = "[a-k] -> Z"
r = "[a-g]{300}"
bench('a.reduce()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'c = vcsn.context(ctx)',
             'r = "{}"'.format(r),
             'a = c.expression(r).standard()'])
ctx = "[a-k] -> Q"
bench('a.reduce()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'])

# synchronizing_word.
bench('a.synchronizing_word()',
      'a = de_bruijn(6)',
      setup='a = vcsn.context("[abc] -> B").de_bruijn(6).determinize()')

# has_twins_property.
ctx = "[abc] -> Zmin"
r = "[a-c]{200}*+[a-c]{200}*"
bench('a.has_twins_property()',
      'a = std({}, "associative"), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r, "associative").standard()'],
      number=20)

# is_cycle_ambiguous.
ctx = "[abc] -> Z"
r = "[a-c]{2000}(<2>ab+a<3>b)"
bench('a.is_cycle_ambiguous()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'],
      number=20)

# is_ambiguous.
ctx = "[abc] -> Z"
r = "[a-c]{2000}(<2>ab+a<3>b)"
bench('a.is_ambiguous()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'],
      number=20)

# is_functional.
ctx = "[ab]x[xy] -> B"
r = "(a|x){2000}(b|y)"
bench('a.is_functional()',
      'a = std({})'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'],
      number=100)

# accessible.
ctx = "[a-z] -> B"
r = "[a-m]{20000}"
bench('a.accessible()',
      'a = thompson({}).proper(prune=False)'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).thompson().proper(prune=False)'],
      number=4)

# scc.
ctx = "[abc] -> B"
r = '(abc)*{1000}'
for algo in ['dijkstra', 'kosaraju', 'tarjan_iterative', 'tarjan_recursive']:
    bench('a.scc("{}")'.format(algo),
          'a = std({})'.format(r),
          setup=['ctx = "{}"'.format(ctx),
                 'r = "{}"'.format(r),
                 'c = vcsn.context(ctx)',
                 'a = c.expression(r).standard()'],
          number=20)

# polynomial.trie.
r = '[a-j]{6}'
bench('p.trie()',
      'p = [a-j]{6}',
      setup=['c = vcsn.context("[a-j]* -> B")',
             'm = c.polynomial("[a-j]")',
             'p = m ** 6'])

# synchronize
ctx = "[...]*x[...]* -> B"
r = r"""(abc|de)((f|\e)+((g|h)(i|j)*(\e|k)))(l|mn){2000}"""
bench('a.synchronize()',
      'a = std({})'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'c = vcsn.context(ctx)',
             'a = c.expression(r).standard()'])

# is_synchronized
ctx = "[...]*x[...]* -> B"
r = r"""(abc|de)((f|\e)+((g|h)(i|j)*(\e|k)))(l|mn){500000}"""
bench('a.is_synchronized()',
      'a = std({})'.format(r),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'c = vcsn.context(ctx)',
             'a = c.expression(r).standard()'])

# weight_series
ctx = "[a-z] -> Nmin"
r = "a{12000}+<1>[b-z]{12000}"
bench('a.weight_series()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'],
      number=200)

ctx = "[a-z] -> Z"
r = "[a-z]{200}"
bench('a.weight_series()',
      'a = std({}), c = {}'.format(r, ctx),
      setup=['ctx = "{}"'.format(ctx),
             'r = "{}"'.format(r),
             'a = vcsn.context(ctx).expression(r).standard()'],
      number=10)


## ------ ##
## main.  ##
## ------ ##

if args.sort:
    benches = sorted(benches, key=lambda b: b.title)

if args.list:
    for b in benches:
        output(b.title)
    exit(0)

print('vcsn version: {}'.format(vcsn.version))
if args.out is not None:
    cxx = vcsn.config('configuration.cxx')
    comment('vcsn', vcsn.version)
    comment('date', time.strftime("%Y-%m-%d %H:%M:%S"))
    comment('compiler', cxx)
    comment('compiler', subprocess.check_output([cxx, '--version'],
                                                universal_newlines=True))
    uname = os.uname()
    comment('sysname', uname.sysname)
    comment('nodename', uname.nodename)
    comment('release', uname.release)
    comment('machine', uname.machine)
if args.jobs == 0:
    for b in benches:
        Bench.run(b)
else:
    with multiprocessing.Pool(args.jobs) as pool:
        pool.map(Bench.run, benches)

if nfail:
    print("vcsn-score: error: there were {} failures".format(nfail),
          file=sys.stderr)
    exit(1)
