#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import re
import subprocess
import sys
import warnings

from vcsn_tools.config import config

me = sys.argv[0]

def parse_args():
    parser = argparse.ArgumentParser(description='Compile Vcsn programs.')
    parser.add_argument('vars', nargs='*', help='''variable assignments such
                        as `CXX=g++`, or `CXXFLAGS+=-g`, or `CXXFLAGS-=-O3`.''')
    parser.add_argument('input', help='source file to compile')
    parser.add_argument('-shared', help='create a shared lib instead of an executable',
                        action='store_true')
    parser.add_argument('-v', '--verbose', help='be verbose',
                        action='count', default=config['verbose'])
    parser.add_argument('-q', '--quiet', help='hide warnings (including compiler warnings)',
                        action='store_true')
    parser.add_argument('-c', '--color', dest='color', action='store',
                        default='auto',
                        choices=['auto', 'always', 'never'],
                        help='whether to use colors in the output')
    parser.add_argument('-p', '--plain', action='store_true',
                        help='disable all extra features (color and demangle)')

    # Parse the arguments, and complete the 'args' object with the value
    # from the configuration (cxx, cxxflags, etc.).
    args = parser.parse_args()
    for v in args.vars:
        # Process VAR=VAL, VAR+=VAL, VAR-=VAL.
        m = re.match(r'(\w+)([-+]?=)(.*)', v)
        if not m:
            print(me + ': invalid argument:', v, file=sys.stderr)
            sys.exit(1)
        var = m.group(1).lower()
        op  = m.group(2)
        val = m.group(3)
        if op == '=':
            config[var] = val
        elif op == '+=':
            config[var] += ' ' + val
        elif op == '-=':
            config[var] = config[var].replace(val, '')

    for k in config:
        if not k in args:
            setattr(args, k, config[k])
    if 2 <= args.verbose:
        print('args:', file=sys.stderr)
        for k in sorted(args.__dict__):
            print('  {}: {}'.format(k, getattr(args, k)), file=sys.stderr)

    # Strip extension.
    args.base = args.input[:-3]
    # Beware of concurrency issues: insert pid in the name to avoid problem.
    args.pid = str(os.getpid())
    args.tmp = args.base + '.' + args.pid

    # Obey --quiet.
    if args.quiet:
        warnings.filterwarnings('ignore', 'you should install')

    return args

def log(*msg, level=0):
    if level <= args.verbose:
        print(me + ":", *msg, file=sys.stderr)


def fmt(s, **kwargs):
    '''Substitute the value in args.'''
    # Can be nicer once we require Python 3.5.
    d = args.__dict__.copy()
    d.update(kwargs)
    return s.format_map(d)


def notify():
    '''Notify the user that a compilation was finished.'''
    title, message = pretty_plugin(args.base)
    # For some reason, the some first characters (such as open paren
    # or bracket) must be escaped.  Fortunately, a leading backlash
    # suffices.
    cmd = ('(terminal-notifier -title "\\{title}" -message "\\{message}"'
           ' -appIcon "{datadir}/figs/vcsn.png") 2>/dev/null')
    os.system(fmt(cmd, title=title, message=message))


def run(cmd):
    cmd = fmt(cmd)
    log('run:', cmd, level=2)
    try:
        p = subprocess.Popen(cmd, shell=True,
                             stdin=subprocess.DEVNULL,
                             stderr=subprocess.PIPE)
        out, err = p.communicate()
        retcode = p.wait()
    except OSError as e:
        log('execution failed:', e)
        sys.exit(1)
    if out:
        out = out.decode('utf-8')
        print(out)
    if err and (retcode or not args.quiet):
        err = err.decode('utf-8')
        if not args.plain:
            err = demangle(err, color=args.color)
        print(err, file=sys.stderr)
    if retcode:
        if retcode < 0:
            log('child was terminated by signal', -retcode)
        else:
            log('child returned', retcode)
        sys.exit(retcode)


# Main.
args = parse_args()
from vcsn_tools.demangle import demangle, pretty_plugin # pylint: disable=wrong-import-position

if args.shared:
    run("LC_ALL=C {ccache} {cxx} {cppflags} {cxxflags} -fPIC -c -o '{tmp}.o' '{base}.cc'")
    run("LC_ALL=C {cxx} {cxxflags} {ldflags} -fPIC -lvcsn -shared -o '{tmp}.so' '{tmp}.o'")
    os.rename(fmt('{tmp}.so'), fmt('{base}.so'))
    # Upon success, remove the .o file, it is large (10x compared to
    # the *.so on erebus using clang) and not required.  However the
    # debug symbols are in there, so when debugging, leave them!
    if 'VCSN_DEBUG' not in os.environ:
        os.remove(fmt('{tmp}.o'))
    notify()
else:
    # Exploit ccache: use separate compilation.
    run("LC_ALL=C {ccache} {cxx} {cppflags} {cxxflags} -c -o '{tmp}.o' '{base}.cc'")
    run("LC_ALL=C {cxx} {cxxflags} {ldflags} -lvcsn -o '{tmp}' '{tmp}.o'")
    os.rename(fmt('{tmp}'), fmt('{base}'))
    if 'VCSN_DEBUG' not in os.environ:
        os.remove(fmt('{tmp}.o'))
