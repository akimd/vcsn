* 2012-04-04
** standard-of
Initial work on "+".

** mutable_automata are implemented using a pre() and post() states

  What is missing is the correct '$' letter on the initial and final
  transitions.  The current value is the default value for label_t.

  The previous interface has been preserved (but maybe we should
  clean it) except for one change:

    initial() and final() have been changed to return a pseudo
    container of transitions.  These transitions give us both
    the weight and the initial/final state.

  The following methods are new:

    pre(), post()         returns the pre-initial and post-final state.
    all_states()          returns all states, including pre() and post()
    all_transitions()     returns all transitions, including initial and
                            final transitions
    all_entries()         likewise for entries
    all_out(s), all_in(s) likewise for outgoing and ingoing transitions


  The methods get_initial_weight(s) and get_final_weight(s) are slower
  now, because they need to locate the corresponding initial/final
  transition.  For the same reason, is_initial(), is_final() are also
  slower.

* 2012-04-03
** standard-of
Initial version of standard-of is implemented.  Can be tested with
pprat's new option -s:

  $ pprat -wz -s '{123}a'
  digraph A {
    rankdir=LR
    node [shape=circle];
    1
    I1 [style=invis,shape=none,label="",width=0,height=0]
    I1 -> 1
    2
    F2 [style=invis,shape=none,label="",width=0,height=0]
    2 -> F2
    1 -> 2 [label="{123}a"]
  }

** mutable_automaton uses unsigned for state_t and transition_t.

This allows to store states in a std::vector<stored_state_t>.
Likewise for transitions.  Erased elements are marked (so they are
skipped over during iteration), and added to a free store to be reused
later.

** mutable_automaton does not store any weight when WeightSet == b.

** mutable_automaton has a read-only entry interface

  entries() is a pseudo container that filters transitions()
    to see each (src,dst) pair at most once.

  entry_at(src, dst) and entry_at(t) return a polynomial describing
    the entry between (src, dst) or (src_of(t), dst_of(t)).

  entryset() returns the WeightSet that can be used to manipulate
    these polynomials.

** make check-rat, make check-unit

There is a check target for each subdirectory of tests/.

* 2012-04-02
** Alphabets are checked
pprat is hard-coded to use a, b, c, d for all the alphabets
(including for inner rational expressions):

  $ pprat -w b -e 'y'
  1.1: invalid word: y: invalid letter: y

** Weights are checked
As follows:

  $ pprat -w b -e '{12}a'
  1.1-5: invalid Boolean: 12

Unfortunately the locations are bad currently for complex weights:

  $ pprat -w zr -e '{x}a'
  1.1-4: 1.1: invalid word: x: invalid letter: x

To be fixed.

* 2012-03-30
** G++ 4.7 is required
We use constructs that are not supported by 4.6 (e.g., constructor
delegation).

** zrr
As a demonstration that rational expressions can be weights of
rational expressions, pprat supports '-w zrr' (Rat<Rat<Z>>):

   $ pprat -w zr -e '{{{2}{3}a}u}x{{{4}{5}\e}\e}'
   {{{120}a}u}x

Local Variables:
mode: outline
End:
