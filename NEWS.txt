* 2012-04-25
** Expressions overhaul
They are immutable: we no longer make side effects on expressions.
They are shared_ptr, no longer plain pointers.  They *can* be used
like the other values, by value.

** standard-of: star is fixed
Standard-of seems to be correct.

* 2012-04-19
** standard-of is fully implemented
Support for star was implemented, and checked for B and Z.  For
implementation reasons, one cannot yet use rational expressions as
weights.

* 2012-04-18
** mutable_automata::mul_weight

** RatExp::head and tail

** dotty
In order to improve the readability of its output, it no longer
"defines" the reachable states.  See the following diff:

   digraph A {
     rankdir=LR
     node [shape=circle];
  -  1
  -  2
  -  3
  -  4
     I1 [style=invis,shape=none,label="",width=0,height=0]
     I1 -> 1 [label="{6}"]
     F1 [style=invis,shape=none,label="",width=0,height=0]
     1 -> F1
     1 -> 2 [label="a"]
     1 -> 3 [label="a"]
     2 -> 4 [label="{3}b"]
     F4 [style=invis,shape=none,label="",width=0,height=0]
     4 -> F4
     4 -> 3 [label="a"]
   }


** standard-of: many fixes in the handling of the weights
An expression such as "{12}\e" used to leave the weight in the initial
transition; it is now on the final transition.  More generally the
initial transition always has unit as weight.

The product and sum of expressions now handle the left and right
weights.

Accepting initial states in expressions such as "\e+a" are no longer
lost.

* 2012-04-11
** Many renamings
  alphabet_t/alphabet() -> genset_t/genset(), etc.
  factory -> abstract_kratexp.
  factory_ -> kratexp.
  initials() -> initial_transitions(), etc.
  invalid_state -> null_state, etc.
  nb_state() -> num_states(), etc.
  polynomial -> polynomials, etc.

* 2012-04-09
** product

  An implementation of the product of two automata is available.

* 2012-04-07
** z_min

  An example of tropical semiring, to test show_unit().

* 2012-04-05
** char_letters::special()

  This method return a special, reserved character, that is used to
  label initial and final transitions.  This character is not part of
  the alphabet and is never output.

* 2012-04-04
** standard-of
Initial work on "+".

** mutable_automata are implemented using a pre() and post() states

  What is missing is the correct '$' letter on the initial and final
  transitions.  The current value is the default value for label_t.

  The previous interface has been preserved (but maybe we should
  clean it) except for one change:

    initial() and final() have been changed to return a pseudo
    container of transitions.  These transitions give us both
    the weight and the initial/final state.

  The following methods are new:

    pre(), post()         returns the pre-initial and post-final state.
    all_states()          returns all states, including pre() and post()
    all_transitions()     returns all transitions, including initial and
                            final transitions
    all_entries()         likewise for entries
    all_out(s), all_in(s) likewise for outgoing and ingoing transitions


  The methods get_initial_weight(s) and get_final_weight(s) are slower
  now, because they need to locate the corresponding initial/final
  transition.  For the same reason, is_initial(), is_final() are also
  slower.

* 2012-04-03
** standard-of
Initial version of standard-of is implemented.  Can be tested with
pprat's new option -s:

  $ pprat -wz -s '{123}a'
  digraph A {
    rankdir=LR
    node [shape=circle];
    1
    I1 [style=invis,shape=none,label="",width=0,height=0]
    I1 -> 1
    2
    F2 [style=invis,shape=none,label="",width=0,height=0]
    2 -> F2
    1 -> 2 [label="{123}a"]
  }

** mutable_automaton uses unsigned for state_t and transition_t.

This allows to store states in a std::vector<stored_state_t>.
Likewise for transitions.  Erased elements are marked (so they are
skipped over during iteration), and added to a free store to be reused
later.

** mutable_automaton does not store any weight when WeightSet == b.

** mutable_automaton has a read-only entry interface

  entries() is a pseudo container that filters transitions()
    to see each (src,dst) pair at most once.

  entry_at(src, dst) and entry_at(t) return a polynomial describing
    the entry between (src, dst) or (src_of(t), dst_of(t)).

  entryset() returns the WeightSet that can be used to manipulate
    these polynomials.

** make check-rat, make check-unit

There is a check target for each subdirectory of tests/.

* 2012-04-02
** Alphabets are checked
pprat is hard-coded to use a, b, c, d for all the alphabets
(including for inner rational expressions):

  $ pprat -w b -e 'y'
  1.1: invalid word: y: invalid letter: y

** Weights are checked
As follows:

  $ pprat -w b -e '{12}a'
  1.1-5: invalid Boolean: 12

Unfortunately the locations are bad currently for complex weights:

  $ pprat -w zr -e '{x}a'
  1.1-4: 1.1: invalid word: x: invalid letter: x

To be fixed.

* 2012-03-30
** G++ 4.7 is required
We use constructs that are not supported by 4.6 (e.g., constructor
delegation).

** zrr
As a demonstration that rational expressions can be weights of
rational expressions, pprat supports '-w zrr' (Rat<Rat<Z>>):

   $ pprat -w zr -e '{{{2}{3}a}u}x{{{4}{5}\e}\e}'
   {{{120}a}u}x

Local Variables:
mode: outline
End:
