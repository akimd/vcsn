#! /bin/sh

me=$(basename $0)

env=$(set +o)

# stderr LINE...
# --------------
stderr ()
{
  set +xv
  local i
  for i
  do
    echo "$i"
  done | sed -e "s,^,$me: ,g" >&2
  eval "$env"
}

# error EXIT-STATUS LINE...
# -------------------------
error ()
{
  set +xv
  local status=$1
  shift
  stderr "$@"
  exit $status
}

# fatal LINE...
# -------------
fatal ()
{
  set +xv
  error 1 "$@"
}

# run COMMAND...
# --------------
# Display the COMMAND, and run it.
run ()
{
  stderr "running: $*"
  "$@"
}

# find_prog EXE...
# ----------------
# Set find_prog_res to the first EXE found in the path, or set it to
# empty.
find_prog ()
{
  find_prog_res=
  local i
  for i in "$@"
  do
    if $i --version >/dev/null 2>&1; then
      find_prog_res=$i
      break
    fi
  done
}


# quote_for_eval_arg ARG
# ----------------------
# Aesthetically quote ARG to be evaled later.
# This function returns two values: QUOTE_FOR_EVAL_RESULT
# is double-quoted, suitable for a subsequent eval, whereas
# QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters
# which are still active within double quotes backslashified.
#
# Taken from Libtool.
quote_for_eval_arg ()
{
  case $1 in
    (*[\\\`\"\$]*)
      local quote_subst='s/\([`"$\\]\)/\\\1/g'
      quote_for_eval_arg_unquoted_result=`echo "$1" | sed -e "$quote_subst"`;;
    (*)
      quote_for_eval_arg_unquoted_result="$1";;
  esac

  case $quote_for_eval_arg_unquoted_result in
    # Double-quote args containing shell metacharacters to delay
    # word splitting, command substitution and and variable
    # expansion for a subsequent eval.
    # Many Bourne shells cannot handle close brackets correctly
    # in scan sets, so we specify it separately.
    (*[\[\~\#\^\&\*\(\)\{\}\|\;\<\>\?\'\ \	]*|*]*|"")
      quote_for_eval_arg_result="\"$quote_for_eval_arg_unquoted_result\"";;
    (*)
      quote_for_eval_arg_result="$quote_for_eval_arg_unquoted_result";;
  esac
}

# quote_for_eval ARG...
# ---------------------
quote_for_eval ()
{
  local i
  local sep
  local res
  for i
  do
    quote_for_eval_arg "$i"
    res=$res$sep$quote_for_eval_arg_result
    sep=" "
  done
  quote_for_eval_result=$res
}

# tree_copy SOURCE DEST
# ---------------------
# Copy a file-system tree from SOURCE to DEST.  Preserve rights etc.
# DEST is cleared first.
tree_copy ()
{
  local source=$1
  local dest=$2
  rm -rf "$dest"
  mkdir -p "$dest"
  tar -C "$source" -cf - . | tar -C "$dest" -xpBf -
}


# xmv ARG...
# ----------
# Wrapper around "mv" that tries to do things three times, then fail.
# This is because sometimes we get "Input/output error" with WebDAV,
# which is a huge waste of time on the BF.
xmv ()
{
  local i
  for i in 1 2 3
  do
    if mv "$@"; then
      return 0
    fi
  done
  fatal "cannot: mv $*"
}

# older REFERENCE FILE...
# -----------------------
# Whether REFERENCE is older than all the FILEs.
older ()
{
  local ref=$1
  shift
  test -e "$ref" || return 0
  local i
  for i
  do
    if test "$ref" -ot "$i"; then
      return 0
    fi
  done
  return 1
}

# compute_package_id
# ------------------
# Set PACKAGE_ID to the basename of the tarball, e.g., "vcsn-2.0".
# Use only when configure was generated.
compute_package_id ()
{
  PACKAGE_TARNAME=$(sed -ne "/^PACKAGE_TARNAME=/{s///;s/'//g;p;}" \
                        "$DIR_SOURCE/configure")
  PACKAGE_VERSION=$(sed -ne "/^PACKAGE_VERSION=/{s///;s/'//g;p;}" \
                        "$DIR_SOURCE/configure")
  PACKAGE_ID=$PACKAGE_TARNAME-$PACKAGE_VERSION
}

## ----------- ##
## Variables.  ##
## ----------- ##

# ------- #
# Tools.  #
# ------- #
find_prog $MD5SUM gmd5sum md5sum
MD5SUM=$find_prog_res
test -n "$MD5SUM" ||
  fatal "cannot find md5sum"


# ------ #
# Host.  #
# ------ #

# Used to skip tests.
export BUILDFARM_HOSTNAME=$(hostname | sed -e 's/\..*//')


# ------------- #
# Directories.  #
# ------------- #

export DIR_ROOT=$PWD

export DIR_SOURCE=$DIR_ROOT

# All the build flavors will be performed here.
export DIR_ROOT_BUILD=$DIR_ROOT/build

export DIR_BUILD=$DIR_ROOT_BUILD/$BUILDDIR
# Make sure it exists even if ./configure is not run.
mkdir -p $DIR_BUILD


# The DESTDIR to use for the fake install.
export DIR_INSTALL=$DIR_ROOT/install


# Please ccache by allowing different source trees to share the cache.
export CCACHE_BASEDIR=$DIR_SOURCE


## ------ ##
## Main.  ##
## ------ ##

stderr "$BUILDFARM_HOSTNAME: $BUILDFARM_PROJECT-$BUILDFARM_NAME-$BUILDFARM_MODE"

# Cannot just close stdin, as libtool is exec'ing with redirection on
# stdin, so it fails.
exec </dev/null

set -x
