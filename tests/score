#! /bin/zsh

# Use 'zsh' because it provides "time" information on the pipe
# components.  Bash provides only information on the whole pipe.

# Run some coarse grains benchs.

# Use '.' as decimal separator.
export LC_ALL=C

case $# in
  (0) ;;
  (1) if test -x $1/bin/vcsn-determinize; then
        echo "commit $(cd $1 && git show -s --oneline)"
        export PATH=$(cd $1/bin && pwd):$PATH
      else
        echo >&2 "$0: $1/bin does not contain TAF-Kit executables"
        exit 1
      fi
  ;;
esac

TIMEFMT='%E'

run ()
{
  # Save and restore the command's stdout/stdin.
  exec 3>&1 4>&2
  { time=$( { eval "time $1 2>&4"; } 2>&1 ); }
  exec 3>&- 4>&-

  # Join lines with '+'.
  time=$(echo $=time | sed -e 's/ /+/g;s/,/./g')
  total=$(echo $time | sed -e 's/s//g' | bc)
  case $time in
    (*'+'*) # Not a smiley, we match the presence of a plus.
            time=" ($time)";;
    (*)     # $time brings no additional information, don't stutter.
            time=;;
  esac

  # The command, simplified (no "vcsn" explicit).
  cmd=$(echo "$1" | sed -e 's/vcsn[- ]//g')
  printf "%6.2fs%s: %s\n" "$total" "$time" "$cmd"
}

tmp=/tmp/score.tmp
rm -rf $tmp || exit 1
mkdir $tmp  || exit 1
cd $tmp     || exit 1

# Output should be fast.
run "vcsn-standard -Ee 'a?{500}' -O dot  >a500.gv"
run "vcsn-standard -Ee 'a?{500}' -O efsm >a500.efsm"
run "vcsn-standard -Ee 'a?{500}' -O fado >a500.fado"
run "vcsn-standard -Ee 'a?{500}' -O grail>a500.grail"
run "vcsn-standard -Ee 'a?{500}' -O tikz >a500.tikz"

# Input should be too.
run "vcsn-cat -I dot  -q -f a500.gv"
run "vcsn-cat -I efsm -q -f a500.efsm"
run "vcsn-cat -I fado -q -f a500.fado"

# Determinization of ladybird 21.
run 'vcsn-ladybird 21 | vcsn-determinize -q'

# Evaluate of de-bruijn 20.
run 'vcsn-de-bruijn 20 | vcsn-evaluate -q -f - aaaaaaaaaaaaaaaaaaaaa'

# Proper(thompson(a?{2000}))
run 'vcsn-thompson -C "lan_char(a)_b" -Ee "a?{2000}" | vcsn-proper -q'

# To-exp(standard((a+b+c+d)?{100})).
run 'vcsn-standard -Ee "(a+b+c+d)?{100}" | vcsn-aut-to-exp -q'

# power(standard((a+b)*b(<2>a+<2>b)*), 13)
run 'vcsn-standard -C "lal_char(ab)_z" -Ee "(a+b)*b(<2>a+<2>b)*" | vcsn-power -q -f- 13'

# With a?{150}, the product has 22501 states, 124,903,125 transitions,
# which consumes a lot of RAM.  With a?{100}, 10001 states, 24,512,500
# transitions.
run 'vcsn-standard -E -e "a?{100}" -o a100.gv'
run 'vcsn-product -q -f a100.gv a100.gv'
run 'vcsn-shuffle -q -f a100.gv a100.gv'
run 'vcsn-infiltration -q -f a100.gv a100.gv'

# Minimize a big deterministic automaton over booleans.
run 'vcsn-standard -C "lal_char(abcdefghijk)_b" -e "(a+b+c+d+e+f+g){1200}" -O fado | vcsn-minimize -q -I fado -f - signature'
run 'vcsn-standard -C "lal_char(abcdefghijk)_b" -e "(a+b+c+d+e+f+g+h+i+j+k){1200}" -O fado | vcsn-minimize -q -I fado -f - moore'
