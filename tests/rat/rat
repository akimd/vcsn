#! /usr/bin/perl

my $black = `tput setaf 0`;
my $blue = `tput setaf 4`;
my $cyan = `tput setaf 6`;
my $green = `tput setaf 2`;
my $red = `tput setaf 1`;
my $white = `tput setaf 7`;
my $std = `tput init`;

my $FAIL = "${red}FAIL$std";
my $PASS = "${green}PASS$std";

my $fail = 0;

sub quote ($)
{
  my ($in) = @_;
  $in =~ s/(["$\\`])/\\$1/g;
  $in =~ s/^[ \t]*//g;
  $in =~ s/[ \t]*$//g;
  $in;
}

# Parse and pretty-print.
sub pp ($$)
{
  my ($prog, $in) = @_;
  $in = quote($in);
  my $res = `echo  '$in' | $prog`;
  die "failed to run: echo '$in' | $prog: $?"
    if $? && $? != 256;
  chomp($res);
  $res;
}

sub check_rat_exp($$$)
{
  my ($prog, $file, $verbose) = @_;

  use IO::File;
  my $in = new IO::File($file)
    or die "$file: cannot open: $!\n";
  while ($_ = $in->getline())
    {
      my $line = $in->input_line_number;
      chomp;
      s/\s*#.*//;
      next
        unless $_;

      if (/%weight: (.*)/)
        {
          $ws = $1;
          print "WeightSet: $ws\n"
            if $verbose;
          next;
        }

      m/^(.*) (=>|==) (.*)$/
        or die "$file:$line: invalid input: \"$_\"";
      my ($l, $op, $r) = ($1, $2, $3);
      my $L = pp("$prog $ws", $l);

      # == tests that boths are equivalent.
      # =  check the actual result.

      my $R = $op eq '=>' ? quote($r) : pp("$prog $ws", $r);
      # Empty result is a sign of failure.
      if ($L ne '' && $L eq $R)
        {
          print "$PASS: $l $op $r => $L\n";
        }
      else
        {
          print "$file:$line: $FAIL: $l $op $r: $L vs. $R\n";
          if ($verbose)
            {
              print "      $l: " . pp("$prog $ws", $l) . "\n";
              print "      $r: " . pp("$prog $ws", $r) . "\n";
            }
          ++$fail;
        }
    }
}

my $verbose = 1;
my $prog = shift @ARGV;
check_rat_exp($prog, $_, $verbose)
  foreach @ARGV;

exit !!$fail;


### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
