# We add useless letters (0-9) so that when printing [abcd], we
# display [a-d], not [^].
%context: lat<lan_char(abcd0-9), lan_char(efgh0-9)>, q
\z|\z  => \z

# Beware of 'b|\e'.
['a,e'-'b,0'] => a|e+a|f+a|g+a|h+b|\e+b|0

\z|\z @ a|e   => \z
a|e   @ \z|\z => \z
\z|\z @ \z|\z => \z
a|e   @ a|e   => a|e@a|e

a|e @ a|e + a|e == (a|e @ a|e) + a|e

0 + a|e  => 0|0+a|e
(0+12*)(a|e)(3+4*5)  => (0|0+(1|1)(2|2)*)(a|e)(3|3+(4|4)*(5|5))

%identities: linear
a|0  @  0|e  => a|e
a|0  @  1|e  => \z
a|\e @ \e|e  => a|e
a|\e @  0|e  => \z
a|0  @ \e|e  => \z

\e|0  @ 0|\e  => \e
\e|0  @ \e    => \z
\e|\e @ \e|\e => \e
0|\e  @ \e    => 0|\e
\e    @ \e|0  => \e|0
\e    @ 0|\e  => \z


%context: lat<lan_char(abcd0-9), lan_char(efgh0-9), lan_char(ijkl0-9)>, q

%identities: associative
\z|\z|\z => \z
\z|e|i   => \z
a|\z|i   => \z
a|e|\z   => \z

\e|\e|\e => \e
a|\e|\e  => a|\e|\e
\e|e|\e  => \e|e|\e
\e|\e|i  => \e|\e|i
a|\e|i   => a|\e|i

# Promotion from single tape to multitape.
0         => 0|0|0
[01]*     => (0|0|0+1|1|1)*
a|e|i + 0 => a|e|i+0|0|0

a|e|i                => a|e|i
a*|e*|i*             => a*|e*|i*
(a|e|i)*             => (a|e|i)*
a|e|i+b|f|j          => a|e|i+b|f|j
(a+b)|(e+f)|(i+j)    => (a+b)|(e+f)|(i+j)
[abcd]|[efgh]|[ijkl] => [a-d]|[e-h]|[i-l]
abcd|efgh|ijkl       => abcd|efgh|ijkl

a|e|i|z ! 1.6: too many tapes\n! a|e|i|z\n!      ^\n!   while reading expression: "a|e|i|z"
a|e     ! 1.1-3: not enough tapes: 2 expected 3\n! a|e\n! ^^^\n!   while reading expression: "a|e"
a       ! 1.1: {0123456789efgh}?: conv: invalid label: a\n!   while converting expression "a" to RatE[{0123456789abcd}? x {0123456789efgh}? x {0123456789ijkl}? -> Q](associative)\n! a\n! ^\n!   while reading expression: "a"

a|e + a|e|i ! 1.1-3: not enough tapes: 2 expected 3\n! a|e + a|e|i\n! ^^^\n!   while reading expression: "a|e + a|e|i"

%identities: linear
b|f|j+a|e|i          => a|e|i+b|f|j
(b+a)|(f+e)|(j+i)    => (a+b)|(e+f)|(i+j)
abcd|efgh|ijkl       => abcd|efgh|ijkl

# Local Variables:
# mode: shell-script
# coding: utf-8
# End:
