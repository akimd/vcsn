# Test cases independant of the weightsets.        -*- shell-script -*-

%labels: letters
%include: common.rat
%identities: trivial
# Base cases.
ab => ab

# Well, this was not really wanted, but it is nice that abc is
# right-associative: that's much better for derived-terms.  However, I
# believe most people expect left-associativity, so having `.`
# left-associative is probably OK.
abc => a(bc)
a.b.c => (ab)c

(ab)c => (ab)c
a(bc) => a(bc)
a{4} => ((aa)a)a
# Error cases.
x ! 1.1: invalid label: unexpected x\n! x\n! ^\n!   while reading expression: "x"



# Precedence and associativity.
%identities: associative
(ab)* => (ab)*
abc => abc
a{4} => aaaa
a(bc) == a.b.c
(abc).(cba) => abccba


%labels: words
%include: common.rat
%identities: trivial
# Base cases.
ab => ab
# Error cases.
x ! 1.1: {abcdefgh}: invalid letter: x\n! x\n! ^\n!   while reading expression: "x"
axb ! 1.2: {abcdefgh}: invalid letter: x\n! axb\n!  ^\n!   while reading expression: "axb"

# Precedence and associativity.
%identities: associative
(ab)* => (ab)*
abc => abc
a(bc) => a(bc)
ab(ab) => (ab){2}
(ab)ab => (ab){2}
ab(ab)ab => (ab){3}
ab(ab)abc*  => (ab){3}c*
(abc).(cba) => (abc)(cba)

# Power is about mul, not concat.
(ab){2} => (ab){2}
(ab){3} => (ab){3}
(ab){,2} => \e+ab+(ab){2}
(ab){1,2} => (ab)(\e+ab)
(ab){2,} => (ab){2}(ab)*
