#! /usr/bin/env python

# A very rough utility to update a test file from its log file.  This
# is very handy when there is a change of syntax: changing every
# single expected output is tedious and error-prone.
#
# usage:
#   update-test --builddir=_build tests/python/*.py

from __future__ import print_function
import argparse, os, re, sys

parser = argparse.ArgumentParser(description='Update test cases.')
parser.add_argument('tests', metavar='test', nargs='+',
                    type=str, default=None,
                    help='a test file to update')
parser.add_argument('--builddir', metavar='DIR',
                    type=str, default=None,
                    help='look for the logs in DIR')
parser.add_argument('--log', metavar='FILE', nargs="+",
                    type=str, default=[],
                    help='consider DIR/FILE')

args = parser.parse_args()

subst = dict()

def contents(file):
  f = open(file)
  return f.read()

def diff_to_re(match):
  '''Convert a portion of patch into a regex substitution to perform.
  '''
  frm = []
  to  = []
  is_diff = False
  for l in match.group(1).splitlines():
    # t in [-+ ]
    t = l[1]
    l = l[2:]
    if t in ['-', ' ']:
      is_diff = True
      frm.append(l)
    if t in ['+', ' ']:
      is_diff = True
      to.append(l)
  if is_diff:
    frm = "\n".join(frm)
    to = "\n".join(to)
    global subst
    subst[frm] = to

def exp_eff_to_re(match):
  fr = ''
  to  = ''
  # For some reason, with python-2.7 on OS X, I raise a
  # exceptions.TypeError when I use (keepends = True) instead of
  # (True)!!!
  for l in match.group(1).splitlines(True):
    fr += l[1:]
  # Drop the final \n.
  fr = fr[:-1]
  for l in match.group(2).splitlines(True):
    to += l[1:]
  to = to[:-1]
  global subst
  subst[fr] = to

def update(test, log):
  try:
    log = contents(args.builddir + '/' + log)
    global subst
    subst = dict()
    re.sub(r'Expected output::\n\n((?:^\t.*\n)+)\n'
           +'Effective output::\n\n((?:^\t.*\n)+)\n',
           exp_eff_to_re, log, flags = re.MULTILINE)
#    re.sub(r'((?:^\t[-+ ].*\n)+)',
#           diff_to_re, log, flags = re.MULTILINE)
    if subst != dict():
      # Turn "subst{frm} -> to" into a large RE.
      frm = '|'.join(map(re.escape, subst.keys()))
      test = re.sub("(" + frm + ")",
                    lambda m: subst[m.group(1)],
                    test, flags = re.MULTILINE)
    return test
  except IOError:
    return test

for t in args.tests:
  old = contents(t)
  new = old
  for l in args.log + [t[:t.rfind('.')] + '.log']:
    new = update(new, l)
  if new != old:
    open(t, 'w').write(new)
