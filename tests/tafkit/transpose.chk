#! /bin/sh

## ------------------------ ##
## vcsn-transpose(ratexp).  ##
## ------------------------ ##

# check INPUT OUTPUT
# ------------------
check ()
{
  run 0 "$2" -vcsn-transpose $ctx -E -e "$1"
}

check2 ()
{
  check "$1" "$2"
  check "$2" "$1"
}

ctx='-C lal_char(abcd)_b'
check '\e' '\e'
check '\z' '\z'
check 'a' 'a'
check 'ab' 'b.a'
check 'abc+aba' '(a.b.a)+(c.b.a)'
check '(ab)*' '(b.a)*'

ctx='-C law_char(abcd)_b'
check '\e' '\e'
check '\z' '\z'
check 'a' 'a'
check 'ab' 'ba'
check 'abc+aba' '(aba)+(cba)'
check '(ab)*' '(ba)*'

ctx='-W zrr -Lw'
check2 '<<<2>xy>ef>abcd' '<<<2>yx>fe>dcba'
check2 '(<ef>(abcd)*<gh>)' '(<hg>(dcba)*<fe>)'


## --------------------------- ##
## vcsn-transpose(automaton).  ##
## --------------------------- ##

# check CONTEXT RATEXP < DIFF
# ---------------------------
# Compare the standard RATEXP to its transposed, expect DIFF.
check ()
{
  run 0 '' -vcsn-standard -E -C "$1" -O dot -e "$2" -o forward.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f forward.out -o transposed.out

  run 1 - -diff -t -W80 --suppress-common-lines -y forward.out transposed.out
}

check 'lal_char(abcd)_b' 'a' <<\EOF
    I0                                 |      I1
    F1                                 |      F0
  I0 -> 0                              |    I1 -> 1
  0 -> 1 [label = "a"]                 |    0 -> F0
  1 -> F1                              |    1 -> 0 [label = "a"]
EOF

check 'lal_char(abcd)_b' 'abc' <<\EOF
    I0                                 |      I3
    F3                                 |      F0
  I0 -> 0                              |    I3 -> 3
  0 -> 1 [label = "a"]                 |    0 -> F0
  1 -> 2 [label = "b"]                 |    1 -> 0 [label = "a"]
  2 -> 3 [label = "c"]                 |    2 -> 1 [label = "b"]
  3 -> F3                              |    3 -> 2 [label = "c"]
EOF

check 'law_char(abcd)_ratexpset<law_char(abcd)_b>' '<ab>(\e+a+b(<abc>c<bcd>)*)<cd>' <<\EOF
                                       >      I1
                                       >      I2
                                       >      I3
    F1                                 <
    F2                                 <
    F3                                 <
  I0 -> 0                              |    I0 -> 0 [label = "<(dc).(ba)>"]
  0 -> F0 [label = "<(ab).(cd)>"]      |    I1 -> 1 [label = "<dc>"]
  0 -> 1 [label = "<ab>a"]             |    I2 -> 2 [label = "<dc>"]
  0 -> 2 [label = "<ab>b"]             |    I3 -> 3 [label = "<dc>"]
  1 -> F1 [label = "<cd>"]             |    0 -> F0
  2 -> F2 [label = "<cd>"]             |    1 -> 0 [label = "<ba>a"]
  2 -> 3 [label = "<(abc).(bcd)>c"]    |    2 -> 0 [label = "<ba>b"]
  3 -> F3 [label = "<cd>"]             |    3 -> 2 [label = "<(dcb).(cba)>c"]
  3 -> 3 [label = "<(abc).(bcd)>c"]    |    3 -> 3 [label = "<(dcb).(cba)>c"]
EOF


# involution AUTOMATON
# --------------------
# Check that transposition is an involution on AUTOMATON.
involution ()
{
  run 0 '' -vcsn-transpose -A -f $1 -o transpose.out
  cp $1 out.exp
  run 0 out.exp -vcsn-transpose -A -f transpose.out
}

run 0 '' -vcsn-de-bruijn -C 'lal_char(abcd)_z' -o de-bruin-2.gv 2
involution de-bruin-2.gv

## -------------- ##
## minimization.  ##
## -------------- ##

# check_minimization < OUT.EXP
check_minimization ()
{
  run 0 '' -vcsn-standard "$@" -o a.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f a.out -o at.out
  run 0 '' -vcsn-determinize -I dot -O dot -A -f at.out -o atd.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f atd.out -o atdt.out
  run 0 -  -vcsn-determinize -I dot -O dot -A -f atdt.out
}

check_minimization -C 'lal_char(ab)_b' -e 'a+a+a+a' <<\EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
    2 [color = DimGray]
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "b", color = DimGray]
  1 -> F1
  1 -> 2 [label = "a, b", color = DimGray]
  2 -> 2 [label = "a, b", color = DimGray]
}
EOF
