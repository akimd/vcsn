#! /bin/sh

## ---------------------- ##
## Existing transitions.  ##
## ---------------------- ##

# See the actual code of product to understand the point of this test
# (which is new_transition vs. add_transition).
run 0 '' -vcsn derived-term -e 'a*a' -o 'a*a.gv'
# FIXME: abort: run 0 '' -vcsn infiltration -o prod.gv -f 'a*a.gv' 'a*a.gv'
# FIXME: abort: run 0 'a*a' -vcsn aut-to-exp -f prod.gv

## -------------------- ##
## Hand crafted tests.  ##
## -------------------- ##

# a infiltration a
run 0 - -vcsn infiltration -C 'lal_char(a)_b' -f "$srcdir/tests/tafkit/product.dir/a.gv" "$srcdir/tests/tafkit/product.dir/a.gv" <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_z"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
    2
    3
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "a"]
  0 -> 3 [label = "a"]
  1 -> F1
  2 -> 1 [label = "a"]
  3 -> 1 [label = "a"]
}
EOF

# abc infiltration abc
run 0 - -vcsn infiltration -C 'lal_char(a)_b' -f "$srcdir/tests/tafkit/product.dir/abc.gv" "$srcdir/tests/tafkit/product.dir/abc.gv" <<\EOF
digraph
{
  vcsn_context = "lal_char(abc)_z"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F9
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "a"]
  0 -> 3 [label = "a"]
  1 -> 4 [label = "b"]
  1 -> 5 [label = "b"]
  1 -> 6 [label = "b"]
  2 -> 1 [label = "a"]
  2 -> 7 [label = "b"]
  3 -> 1 [label = "a"]
  3 -> 8 [label = "b"]
  4 -> 9 [label = "c"]
  4 -> 10 [label = "c"]
  4 -> 11 [label = "c"]
  5 -> 4 [label = "b"]
  5 -> 12 [label = "c"]
  6 -> 4 [label = "b"]
  6 -> 13 [label = "c"]
  7 -> 5 [label = "a"]
  7 -> 14 [label = "c"]
  8 -> 6 [label = "a"]
  8 -> 15 [label = "c"]
  9 -> F9
  10 -> 9 [label = "c"]
  11 -> 9 [label = "c"]
  12 -> 10 [label = "b"]
  13 -> 11 [label = "b"]
  14 -> 12 [label = "a"]
  15 -> 13 [label = "a"]
}
EOF

# abc infiltration xy
run 0 - -vcsn infiltration -C 'lal_char(a)_b' -f "$srcdir/tests/tafkit/product.dir/abc.gv" "$srcdir/tests/tafkit/product.dir/xy.gv" <<\EOF
digraph
{
  vcsn_context = "lal_char(abcxy)_z"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F11
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "x"]
  1 -> 3 [label = "b"]
  1 -> 4 [label = "x"]
  2 -> 4 [label = "a"]
  2 -> 5 [label = "y"]
  3 -> 6 [label = "c"]
  3 -> 7 [label = "x"]
  4 -> 7 [label = "b"]
  4 -> 8 [label = "y"]
  5 -> 8 [label = "a"]
  6 -> 9 [label = "x"]
  7 -> 9 [label = "c"]
  7 -> 10 [label = "y"]
  8 -> 10 [label = "b"]
  9 -> 11 [label = "y"]
  10 -> 11 [label = "c"]
  11 -> F11
}
EOF


## --------------------- ##
## Heterogeneous input.  ##
## --------------------- ##

# RatE and B, in both directions.
run 0 '' -vcsn standard -C 'lal_char(ab)_ratexpset<lal_char(uv)_b>' \
         -e '(<u>a+<v>b)*' -o ab.gv
run 0 '' -vcsn standard -C 'lal_char(ab)_b' \
         -e 'a' -o a.gv
# FIXME: ABORT
### run 0 '' -vcsn infiltration -o 1.gv -f ab.gv a.gv
### run 0 '<u+\e>a + <u.u+u+u>aa + <u.v+v>ab + <v.u+v>ba' \
###       -vcsn shortest -f 1.gv 4
### run 0 '' -vcsn infiltration -o 2.gv -f a.gv ab.gv
### run 0 '<u+\e>a + <u.u+u+u>aa + <u.v+v>ab + <v.u+v>ba' \
###       -vcsn shortest -f 2.gv 4

## ----------------- ##
## Non-commutative.  ##
## ----------------- ##

run 0 '' -vcsn standard -C 'lal_char(ab)_ratexpset<lal_char(uv)_b>' \
         -e '<u>a<v>b' -o uavb.gv
run 0 '' -vcsn standard -C 'lal_char(ab)_ratexpset<lal_char(xy)_b>' \
         -e '<x>a<y>b' -o xayb.gv
run 0 '' -vcsn infiltration -o uavb-xayb.gv -f uavb.gv xayb.gv
run 0 - -vcsn enumerate -f uavb-xayb.gv 4 <<\EOF
<u.x.v.y>ab
<u.x.v.y+x.u.v.y>aab
<u.x.v.y+u.x.y.v>abb
<u.x.v.y+u.x.y.v+x.u.v.y+x.u.y.v>aabb
<u.v.x.y+x.y.u.v>abab
EOF

## ------- ##
## n-ary.  ##
## ------- ##

for l in a b c d
do
  run 0 '' -vcsn standard -C 'lal_char(x)_ratexpset<lal_char(abcd)_b>' -e "<$l>x" -o $l.gv
done
run 0 '' -vcsn infiltration -o abcd.gv -f a.gv b.gv c.gv d.gv
run 0 - -vcsn enumerate -f abcd.gv 10 <<\EOF
<a.b.c.d>x
<a.c.d.b+b.c.d.a+a.b.d.c+a.d.b.c+b.d.a.c+c.d.a.b+a.b.c.d+a.c.b.d+b.c.a.d+a.b.c.d+a.b.c.d+b.a.c.d+c.a.b.d+d.a.b.c>xx
<a.d.c.b+a.d.b.c+b.d.c.a+b.d.a.c+c.d.a.b+c.d.b.a+a.c.d.b+a.c.b.d+b.c.d.a+b.c.a.d+a.b.d.c+a.b.c.d+a.c.d.b+a.b.d.c+a.d.b.c+a.b.c.d+a.c.b.d+a.b.c.d+b.c.d.a+b.a.d.c+b.d.a.c+b.a.c.d+b.c.a.d+b.a.c.d+c.a.d.b+c.b.d.a+c.d.a.b+c.a.b.d+c.a.b.d+c.b.a.d+d.a.c.b+d.b.c.a+d.a.b.c+d.a.b.c+d.b.a.c+d.c.a.b>xxx
<a.d.c.b+a.d.b.c+a.c.d.b+a.c.b.d+a.b.d.c+a.b.c.d+b.d.c.a+b.d.a.c+b.c.d.a+b.c.a.d+b.a.d.c+b.a.c.d+c.d.a.b+c.d.b.a+c.a.d.b+c.a.b.d+c.b.d.a+c.b.a.d+d.a.c.b+d.a.b.c+d.b.c.a+d.b.a.c+d.c.a.b+d.c.b.a>xxxx
EOF
