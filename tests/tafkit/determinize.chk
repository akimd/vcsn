#! /bin/sh

## ------------------------- ##
## Determinize Thompson(a).  ##
## ------------------------- ##
cat >a.dot <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  0 -> 1 [label = "a"]
  1 -> F1
  I0 -> 0
}
EOF
cat >out.exp <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  { 0 1 2 }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "b"]
  1 -> F1
  1 -> 2 [label = "a, b"]
  2 -> 2 [label = "a, b"]
}
EOF
run 0 out.exp -vcsn-determinize -f a.dot
# Idempotence.
run 0 out.exp -vcsn-determinize -f out.exp


## -------------------------- ##
## Determinize Thompson(\e).  ##
## -------------------------- ##
cat >epsilon.dot <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  0 -> F0
  I0 -> 0
}
EOF
cat >out.exp <<\EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  { 0 1 }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a, b"]
  1 -> 1 [label = "a, b"]
}
EOF
run 0 out.exp -vcsn-determinize -f epsilon.dot
# Idempotence.
run 0 out.exp -vcsn-determinize -f out.exp

## -------------------------- ##
## Determinize Thompson(\z).  ##
## -------------------------- ##
cat >empty.dot <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
}
EOF
cat >out.exp <<\EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
  }
  { 0 }
  I0 -> 0
  0 -> 0 [label = "a, b"]
}
EOF
run 0 out.exp -vcsn-determinize -f empty.dot
# Idempotence.
run 0 out.exp -vcsn-determinize -f out.exp



## ----------------------- ##
## Determinize de bruijn.  ##
## ----------------------- ##

# check FAMILY SIZE
# -----------------
# Check that determinization is idempotent on FAMILY ("ladybird",
# or "de-bruijn".  Leave the result in out.exp.
check ()
{
  case $1 in
   (de-bruijn) ctx='lal_char(ab)_b';;
   (ladybird)  ctx='lal_char(abc)_b';;
  esac
  run 0 '' -vcsn-$1          -C "$ctx"    -o $1-$2.dot $2
  run 0 '' -vcsn-determinize -f $1-$2.dot -o $1-$2-d.dot
  # Idempotence.
  cp $1-$2-d.dot out.exp
  run 0 out.exp -vcsn-determinize -f $1-$2-d.dot
}


check de-bruijn 3
# Check the output (2^4 is still ok).
mv out.exp de-bruijn-3-det.dot
cat >out.exp <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F6
    F7
    F8
    F9
    F12
    F13
    F14
    F15
  }
  { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 }
  I0 -> 0
  0 -> 0 [label = "b"]
  0 -> 1 [label = "a"]
  1 -> 2 [label = "a"]
  1 -> 3 [label = "b"]
  2 -> 10 [label = "a"]
  2 -> 11 [label = "b"]
  3 -> 4 [label = "a"]
  3 -> 5 [label = "b"]
  4 -> 8 [label = "a"]
  4 -> 9 [label = "b"]
  5 -> 6 [label = "a"]
  5 -> 7 [label = "b"]
  6 -> F6
  6 -> 2 [label = "a"]
  6 -> 3 [label = "b"]
  7 -> F7
  7 -> 0 [label = "b"]
  7 -> 1 [label = "a"]
  8 -> F8
  8 -> 10 [label = "a"]
  8 -> 11 [label = "b"]
  9 -> F9
  9 -> 4 [label = "a"]
  9 -> 5 [label = "b"]
  10 -> 14 [label = "a"]
  10 -> 15 [label = "b"]
  11 -> 12 [label = "a"]
  11 -> 13 [label = "b"]
  12 -> F12
  12 -> 8 [label = "a"]
  12 -> 9 [label = "b"]
  13 -> F13
  13 -> 6 [label = "a"]
  13 -> 7 [label = "b"]
  14 -> F14
  14 -> 14 [label = "a"]
  14 -> 15 [label = "b"]
  15 -> F15
  15 -> 12 [label = "a"]
  15 -> 13 [label = "b"]
}
EOF
run 0 out.exp -cat de-bruijn-3-det.dot

# Don't display, too big.
check de-bruijn 8
mv out.exp de-bruijn-8-det.dot
run 0 - -vcsn-cat -O info -f de-bruijn-8-det.dot <<EOF
context: mutable_automaton<lal_char(ab)_b>
number of states: 512
number of initial states: 1
number of final states: 256
number of transitions: 1024
is deterministic: 1
is proper: 1
is valid: 1
EOF


## ---------------------- ##
## Determinize ladybird.  ##
## ---------------------- ##

check ladybird 4
mv out.exp ladybird-4-det.dot
cat >out.exp <<EOF
digraph
{
  vcsn_context = "lal_char(abc)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F4
    F7
    F9
    F10
    F11
    F13
    F14
  }
  { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "b, c"]
  1 -> 1 [label = "b"]
  1 -> 3 [label = "a"]
  1 -> 4 [label = "c"]
  2 -> 2 [label = "a, b, c"]
  3 -> 3 [label = "b"]
  3 -> 13 [label = "c"]
  3 -> 15 [label = "a"]
  4 -> F4
  4 -> 1 [label = "b"]
  4 -> 4 [label = "c"]
  4 -> 5 [label = "a"]
  5 -> 5 [label = "b"]
  5 -> 6 [label = "a"]
  5 -> 7 [label = "c"]
  6 -> 6 [label = "b"]
  6 -> 9 [label = "c"]
  6 -> 14 [label = "a"]
  7 -> F7
  7 -> 5 [label = "b"]
  7 -> 7 [label = "c"]
  7 -> 8 [label = "a"]
  8 -> 8 [label = "b"]
  8 -> 9 [label = "a"]
  8 -> 10 [label = "c"]
  9 -> F9
  9 -> 6 [label = "b"]
  9 -> 9 [label = "c"]
  9 -> 11 [label = "a"]
  10 -> F10
  10 -> 8 [label = "b"]
  10 -> 10 [label = "a, c"]
  11 -> F11
  11 -> 7 [label = "a"]
  11 -> 11 [label = "c"]
  11 -> 12 [label = "b"]
  12 -> 11 [label = "c"]
  12 -> 12 [label = "b"]
  12 -> 13 [label = "a"]
  13 -> F13
  13 -> 3 [label = "b"]
  13 -> 12 [label = "a"]
  13 -> 13 [label = "c"]
  14 -> F14
  14 -> 4 [label = "a"]
  14 -> 14 [label = "c"]
  14 -> 15 [label = "b"]
  15 -> 0 [label = "a"]
  15 -> 14 [label = "c"]
  15 -> 15 [label = "b"]
}
EOF
run 0 out.exp -cat ladybird-4-det.dot

# Don't display, too big.
check ladybird 8
mv out.exp ladybird-8-det.dot
run 0 - -vcsn-cat -O info -f ladybird-8-det.dot <<EOF
context: mutable_automaton<lal_char(abc)_b>
number of states: 256
number of initial states: 1
number of final states: 128
number of transitions: 768
is deterministic: 1
is proper: 1
is valid: 1
EOF
