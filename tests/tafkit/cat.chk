#! /bin/sh

## --------- ##
## RatExps.  ##
## --------- ##

# There are not many such tests because rat/ tests cover this
# extensively.

# check_exp CONTEXT INPUT OUTPUT
# ------------------------------
# Check -C and (?@...) support.
check_exp ()
{
  run 0 $3 -vcsn-cat -E -C "$1" -e "$2"
  run 0 $3 -vcsn-cat -E -e "(?@$1)$2"
}

check_exp 'lal_char(abcd)_b' "abcd" "a.b.c.d"
check_exp 'lal_char(abc)_ratexpset<lal_char(def)_ratexpset<lal_char(xyz)_z>>' \
    "<<<42>x>d>a+<<<51>x>d>a+(<<<42>y>e>b)*" \
    "<<<42>x>d>a+<<<51>x>d>a+((<<<42>y>e>b)*)"

# Check that we do support digits as letters.
check_exp 'lal_char(0123)_b' "0123" "0.1.2.3"
check_exp 'lal_char(0123)_z' "<0123>0123" "<123>(0.1.2.3)"


# check_info EXP-OUT VCSN-CAT-ARGS...
# -----------------------------------
check_info ()
{
  run 0 - -vcsn-cat "$@" -O info
}

check_info -Ee '(?@lal_char(abc)_b)abc' <<\EOF
context: lal_char(abc)_b
sum: 0
prod: 1
star: 0
zero: 0
one: 0
atom: 3
EOF

check_info -Ee '(?@lal_char(abc)_b)\e+bc*' <<\EOF
context: lal_char(abc)_b
sum: 1
prod: 1
star: 1
zero: 0
one: 1
atom: 2
EOF



## ------------------- ##
## Standard Automata.  ##
## ------------------- ##


# check_stdof CONTEXT RATEXP
# --------------------------
# Check that vcsn-cat is idempotent on the standard RATEXP.
check_stdof ()
{
  run 0 '' -vcsn-standard -E -C "$1" -e "$2" -o std.gv
  cp std.gv out.exp
  run 0 out.exp -vcsn-cat -Af out.exp
}

check_stdof 'lal_char(abcd)_b' "abcd"
check_stdof 'lal_char(abcd)_z' "<3>\\e"
check_stdof 'lal_char(abcd)_zmin' "<3>(\\e+a)"


## ------------------ ##
## Invalid automata.  ##
## ------------------ ##

# Check invalid input.
fail_aut ()
{
  cat >in.gv
  run 1 '' -vcsn-cat -Af in.gv
}

# Invalid label: letter not in alphabet.
fail_aut <<\EOF
digraph
{
  vcsn_context = "lal_char_b"
  vcsn_alphabet = "a"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
EOF

# Invalid label: \e is not valid in LAL.
fail_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  0 -> 1 [label = "\\e"]
  1 -> F1
  I0 -> 0
}
EOF

# Invalid label: aa is not valid in LAL.
fail_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  0 -> 1 [label = "aa"]
  1 -> F1
  I0 -> 0
}
EOF

# No context defined (see the typo in vcsn_context).
fail_aut <<\EOF
digraph
{
  vcsn_contxt = "lal_char(ab)_b"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
EOF

# Invalid context.
fail_aut <<\EOF
digraph
{
  vcsn_context = "unknown"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
EOF

# Invalid initial label.
fail_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0 [label = a]
}
EOF

# Invalid final label.
fail_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  0 -> 1 [label = a]
  1 -> F1 [label = a]
  I0 -> 0
}
EOF

## ------------------ ##
## General Automata.  ##
## ------------------ ##

# check_aut < AUTOMATON
# ---------------------
# Check that vcsn-cat can read AUTOMATON, and is idempotent on it.
check_aut ()
{
  cat >in.tmp
  sed -n '/^--*$/q;p'             in.tmp >in.gv
  sed -n '/^--*$/,${/^--*$/d;p;}' in.tmp >out.exp
  run 0 out.exp -vcsn-cat -Af in.gv "$@"
  $exit
}

# lao_z.
check_aut <<\EOF
digraph
{
  vcsn_context = "lao_z"
  0 -> 1 [label = "<42>"]
  0 -> 1 [label = "<51>"]
  1 -> F1
  I0 -> 0
}
---
digraph
{
  vcsn_context = "lao_z"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> 1 [label = "<93>"]
  1 -> F1
}
EOF

# lal_char(a)_b.
check_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
---
digraph
{
  vcsn_context = "lal_char(a)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  1 -> F1
}
EOF

# lan_char(a)_b.
check_aut <<\EOF
digraph
{
  vcsn_context = "lan_char(a)_b"
  0 -> 1 [label = a]
  0 -> 1 [label = "\\e"]
  1 -> F1
  I0 -> 0
}
---
digraph
{
  vcsn_context = "lan_char(a)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> 1 [label = "\\e, a"]
  1 -> F1
}
EOF

# lal_char(a)_b.
check_aut <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  {
    1
  }
  ->
  {
    2 3
  }
  ->
  {
    4 5 6
  }
  ->
  {
    7 8 9 10
  }
  ->
  {
    11 12 13 14 15
  }
  [label = a]
  I -> 1
  { 11 12 13 14 15 } -> F
}
---
digraph
{
  vcsn_context = "lal_char(a)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F10
    F11
    F12
    F13
    F14
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "a"]
  1 -> 3 [label = "a"]
  1 -> 4 [label = "a"]
  1 -> 5 [label = "a"]
  2 -> 3 [label = "a"]
  2 -> 4 [label = "a"]
  2 -> 5 [label = "a"]
  3 -> 6 [label = "a"]
  3 -> 7 [label = "a"]
  3 -> 8 [label = "a"]
  3 -> 9 [label = "a"]
  4 -> 6 [label = "a"]
  4 -> 7 [label = "a"]
  4 -> 8 [label = "a"]
  4 -> 9 [label = "a"]
  5 -> 6 [label = "a"]
  5 -> 7 [label = "a"]
  5 -> 8 [label = "a"]
  5 -> 9 [label = "a"]
  6 -> 10 [label = "a"]
  6 -> 11 [label = "a"]
  6 -> 12 [label = "a"]
  6 -> 13 [label = "a"]
  6 -> 14 [label = "a"]
  7 -> 10 [label = "a"]
  7 -> 11 [label = "a"]
  7 -> 12 [label = "a"]
  7 -> 13 [label = "a"]
  7 -> 14 [label = "a"]
  8 -> 10 [label = "a"]
  8 -> 11 [label = "a"]
  8 -> 12 [label = "a"]
  8 -> 13 [label = "a"]
  8 -> 14 [label = "a"]
  9 -> 10 [label = "a"]
  9 -> 11 [label = "a"]
  9 -> 12 [label = "a"]
  9 -> 13 [label = "a"]
  9 -> 14 [label = "a"]
  10 -> F10
  11 -> F11
  12 -> F12
  13 -> F13
  14 -> F14
}
EOF
