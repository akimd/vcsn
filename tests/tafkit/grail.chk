#! /bin/sh

# check SIZE
# ----------
# Check FAdo can be fed with ladybird SIZE.
check ()
{
  run 0 ignore -vcsn-ladybird -O fado -o lady.fa $1
  run 0 ignore -python -c "from FAdo import fa;fa.readFromFile('lady.fa')"
}

check 20


# check_f AUT
# -----------
# Check FAdo can be fed with AUT.
check_f ()
{
  run 0 ignore -vcsn-cat -f $1 -O fado -o aut.fa
  run 0 ignore -python -c "from FAdo import fa;fa.readFromFile('aut.fa')"
}

check_f $top_srcdir/share/vcsn/a1.gv

check_f - <<\EOF
digraph
{
  vcsn_context = "lan_char(ab)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I
    F
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I -> 0
  0 -> 0 [label = "a, b"]
  0 -> 1 [label = "\\e"]
  1 -> 2 [label = "b"]
  2 -> 2 [label = "a, b"]
  2 -> F
}
EOF

check_aut ()
{
  cat >in.tmp
  sed -n '/^--*$/q;p'             in.tmp >in.gv
  sed -n '/^--*$/,${/^--*$/d;p;}' in.tmp >out.exp
  run 0 out.exp -vcsn-cat -Af in.gv "$@"
  $exit
}

# lal_char(a)_b. FAdo.
check_aut -O fado <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
---
@DFA 1
0 a 1
EOF

check_aut -O grail <<\EOF
digraph
{
  vcsn_context = "lal_char(a)_b"
  0 -> 1 [label = a]
  1 -> F1
  I0 -> 0
}
---
(START) |- 0
0 a 1
1 -| (FINAL)
EOF

check_grail ()
{
  run 0 ignore -vcsn-ladybird -O grail -o grail.gr $1
  run 0 ignore -python -c "from FAdo import grail;grail.importFromGrailFile('grail.gr')"
}

check_grail 10

check_aut -I fado <<\EOF
@DFA 1
0 a 1
---
digraph
{
  vcsn_context = "lal_char(a)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I1
    F0
  }
  {
    node [shape = circle]
    0
    1
  }
  I1 -> 1
  0 -> F0
  1 -> 0 [label = "a"]
}
EOF

check_aut -I fado <<\EOF
@NFA 1 4 * 2 3
0 a 1
1 b 2
2 c 3
3 d 4
---
digraph
{
  vcsn_context = "lal_char(abcd)_b"
  rankdir = LR
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I2
    I3
    F0
    F1
  }
  {
    node [shape = circle]
    0 [color = DimGray]
    1
    2
    3
    4 [color = DimGray]
  }
  I2 -> 2
  I3 -> 3
  0 -> F0 [color = DimGray]
  0 -> 2 [label = "b", color = DimGray]
  1 -> F1
  2 -> 3 [label = "c"]
  3 -> 1 [label = "d"]
  4 -> 0 [label = "a", color = DimGray]
}
EOF
