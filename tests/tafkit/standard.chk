#! /bin/sh

# context VCSN-STANDARD-OF-ARGUMENTS
# ----------------------------------
context ()
{
  while test $# != 0
  do
    case $1 in
      (-W) case $2 in
            (zr) echo 'lal_char(abcd)_ratexpset<lal_char(efgh)_z>';;
            (*) echo "lal_char(abcd)_$2";;
           esac
           return 0;;
      (-C) echo "$2"
           return 0;;
    esac
    shift
  done
  echo 'lal_char(abcd)_b'
  return 0
}

# check VCSN-STANDARD-OF-ARGUMENTS
# --------------------------------
# Expected output is on stdin, except the constant bits (see below).
check ()
{
  ctx=$(context "$@")
  cat >out.exp <<EOF
digraph
{
  vcsn_context = "$ctx"
  rankdir = LR
EOF
  cat >>out.exp
  cat >>out.exp <<\EOF
}
EOF

  run 0 out.exp -vcsn-standard "$@" -O dot
}

fail ()
{
  run 1 '' -vcsn-standard -C "$@"
}

## --- ##
## B.  ##
## --- ##

# B: "\z".
check -W b -e '\z' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
  }
  {
    node [shape = circle]
    0 [color = gray]
  }
  I0 -> 0 [color = gray]
EOF

# B: "\e".
check -W b -e '\e' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  {
    node [shape = circle]
    0
  }
  I0 -> 0
  0 -> F0
EOF

# B: "a"
check -W b -e 'a' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  1 -> F1
EOF

## -------- ##
## B: Sum.  ##
## -------- ##

# B: "a+b"
check -W b -e 'a+b' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "b"]
  1 -> F1
  2 -> F2
EOF

# B: "abc".
check -W b -e 'abc' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F3
  }
  {
    node [shape = circle]
    0
    1
    2
    3
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  1 -> 2 [label = "b"]
  2 -> 3 [label = "c"]
  3 -> F3
EOF

# B: "ab+cd".
check -W b -e 'ab+cd' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F2
    F4
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 3 [label = "c"]
  1 -> 2 [label = "b"]
  2 -> F2
  3 -> 4 [label = "d"]
  4 -> F4
EOF

# B: "a(b+c)d".
check -W b -e 'a(b+c)d' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F3
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  1 -> 2 [label = "b"]
  1 -> 4 [label = "c"]
  2 -> 3 [label = "d"]
  3 -> F3
  4 -> 3 [label = "d"]
EOF

# B: "(ab+cd+abcd)abc".
check -W b -e '(ab+cd+abcd)abc' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F11
  }
  {
    node [shape = circle]
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 3 [label = "c"]
  0 -> 4 [label = "a"]
  1 -> 2 [label = "b"]
  2 -> 6 [label = "a"]
  3 -> 5 [label = "d"]
  4 -> 7 [label = "b"]
  5 -> 6 [label = "a"]
  6 -> 10 [label = "b"]
  7 -> 8 [label = "c"]
  8 -> 9 [label = "d"]
  9 -> 6 [label = "a"]
  10 -> 11 [label = "c"]
  11 -> F11
EOF


## --------- ##
## B: Star.  ##
## --------- ##

check -e '\z*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  {
    node [shape = circle]
    0
  }
  I0 -> 0
  0 -> F0
EOF

check -e '\e*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  {
    node [shape = circle]
    0
  }
  I0 -> 0
  0 -> F0
EOF

check -e 'a*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F0
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a"]
  1 -> F1
  1 -> 1 [label = "a"]
EOF

check -e '(a+b)*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F2
    F0
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "b"]
  1 -> F1
  1 -> 1 [label = "a"]
  1 -> 2 [label = "b"]
  2 -> F2
  2 -> 1 [label = "a"]
  2 -> 2 [label = "b"]
EOF

check -e '(ab)*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F2
    F0
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a"]
  1 -> 2 [label = "b"]
  2 -> F2
  2 -> 1 [label = "a"]
EOF

check -e 'a**' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F0
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "a"]
  1 -> F1
  1 -> 1 [label = "a"]
EOF

## ---- ##
## BR.  ##
## ---- ##

# Make sure that the initial weight of the rhs of the concatenation is
# properly handled.
check -C 'lal_char(a)_ratexpset<lal_char(xyz)_b>' -e '<x>a(<y>\e+<z>a)' <<EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F2
    F1
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> 1 [label = "<x>a"]
  1 -> F1 [label = "<y>"]
  1 -> 2 [label = "<z>a"]
  2 -> F2
EOF


## --- ##
## Z.  ##
## --- ##


# Z: "<12>\e".
check -W z -e '<12>\e' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  {
    node [shape = circle]
    0
  }
  I0 -> 0
  0 -> F0 [label = "<12>"]
EOF

## -------- ##
## Z: sum.  ##
## -------- ##

# Z: "\e+a+\e"
check -W z -e '\e+a+\e' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F1
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> F0 [label = "<2>"]
  0 -> 1 [label = "a"]
  1 -> F1
EOF

# Z: "<12>\e+<23>a+<34>b".
check -W z -e '<12>\e+<23>a+<34>b' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F1
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<12>"]
  0 -> 1 [label = "<23>a"]
  0 -> 2 [label = "<34>b"]
  1 -> F1
  2 -> F2
EOF

# left weight.
check -W z -e '<12>(\e+a+<10>b+<10>\e)' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F1
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<132>"]
  0 -> 1 [label = "<12>a"]
  0 -> 2 [label = "<120>b"]
  1 -> F1
  2 -> F2
EOF

# right weight.
check -W z -e '(\e+a+<2>b+<3>\e)<10>' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F1
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<40>"]
  0 -> 1 [label = "a"]
  0 -> 2 [label = "<2>b"]
  1 -> F1 [label = "<10>"]
  2 -> F2 [label = "<10>"]
EOF

## ------------ ##
## Z: product.  ##
## ------------ ##

# Z: "<12>(ab)<23>".
check -W z -e '<12>(ab)<23>' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> 1 [label = "<12>a"]
  1 -> 2 [label = "b"]
  2 -> F2 [label = "<23>"]
EOF

## --------- ##
## Z: star.  ##
## --------- ##

check -W z -e '\z*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
  }
  {
    node [shape = circle]
    0
  }
  I0 -> 0
  0 -> F0
EOF

fail -W z -e '\e*'

check -W z -e '(<2>a)*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F0
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "<2>a"]
  1 -> F1
  1 -> 1 [label = "<2>a"]
EOF

check -W z -e '<2>a*<3>' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F0
  }
  {
    node [shape = circle]
    0
    1
  }
  I0 -> 0
  0 -> F0 [label = "<6>"]
  0 -> 1 [label = "<2>a"]
  1 -> F1 [label = "<3>"]
  1 -> 1 [label = "a"]
EOF

check -W z -e '(<2>a+<3>b)*' <<\EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F2
    F0
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0
  0 -> 1 [label = "<2>a"]
  0 -> 2 [label = "<3>b"]
  1 -> F1
  1 -> 1 [label = "<2>a"]
  1 -> 2 [label = "<3>b"]
  2 -> F2
  2 -> 1 [label = "<2>a"]
  2 -> 2 [label = "<3>b"]
EOF

check -W z -e '<2>(<3>a+<5>b)*<7>' <<EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F1
    F2
    F0
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<14>"]
  0 -> 1 [label = "<6>a"]
  0 -> 2 [label = "<10>b"]
  1 -> F1 [label = "<7>"]
  1 -> 1 [label = "<3>a"]
  1 -> 2 [label = "<5>b"]
  2 -> F2 [label = "<7>"]
  2 -> 1 [label = "<3>a"]
  2 -> 2 [label = "<5>b"]
EOF

check -W z -e '<2>(<3>(ab)<5>)*<7>' <<EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F2
    F0
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<14>"]
  0 -> 1 [label = "<6>a"]
  1 -> 2 [label = "b"]
  2 -> F2 [label = "<35>"]
  2 -> 1 [label = "<15>a"]
EOF

fail -W z -e 'a**'

## ---------- ##
## ZR: star.  ##
## ---------- ##

check -W zr -e '(<e>\e+abc)*' <<EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F3
  }
  {
    node [shape = circle]
    0
    1
    2
    3
  }
  I0 -> 0
  0 -> F0 [label = "<e*>"]
  0 -> 1 [label = "<e*>a"]
  1 -> 2 [label = "b"]
  2 -> 3 [label = "c"]
  3 -> F3 [label = "<e*>"]
  3 -> 1 [label = "<e*>a"]
EOF

check -W zr -e '(<e>\e+ab<f>)*' <<EOF
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I0
    F0
    F2
  }
  {
    node [shape = circle]
    0
    1
    2
  }
  I0 -> 0
  0 -> F0 [label = "<e*>"]
  0 -> 1 [label = "<e*>a"]
  1 -> 2 [label = "b"]
  2 -> F2 [label = "<f.(e*)>"]
  2 -> 1 [label = "<f.(e*)>a"]
EOF
