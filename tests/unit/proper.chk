#! /bin/sh

run 0 - tests/unit/proper <<\EOF
---------- LAL
type: mutable_automaton<letterset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper:
type: mutable_automaton<letterset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
forward_proper:
type: mutable_automaton<letterset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper_here:
type: mutable_automaton<letterset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1

---------- LAW
digraph
{
  vcsn_context = "[ab]* → 𝔹"
  rankdir = LR
  edge [arrowhead = vee, arrowsize = .6]
  {
    node [shape = point, width = 0]
    I0
    F1
  }
  {
    node [shape = circle, style = rounded, width = 0.5]
    0
    1
    2
  }
  I0 -> 0
  0 -> 1 [label = "a"]
  0 -> 2 [label = "\\e"]
  1 -> F1
  1 -> 0 [label = "\\e"]
  1 -> 2 [label = "a"]
  2 -> 0 [label = "a"]
  2 -> 1 [label = "\\e"]
}
type: mutable_automaton<wordset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 6
number of spontaneous transitions: 3
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 0
is free: N/A
is normalized: 0
is proper: N/A
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper:
type: mutable_automaton<wordset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
forward_proper:
type: mutable_automaton<wordset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 3
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper_here:
type: mutable_automaton<wordset<char_letters(ab)>, b>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1

---------- LAL Z
type: mutable_automaton<letterset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper:
type: mutable_automaton<letterset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper_here:
type: mutable_automaton<letterset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 3
number of deterministic states: 3
number of transitions: 3
number of spontaneous transitions: 0
is complete: 0
is deterministic: N/A
is codeterministic: 1
is empty: 0
is eps-acyclic: 1
is free: 1
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1

---------- LAW Z
* Circuit of eps-transition
type: mutable_automaton<wordset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 6
number of spontaneous transitions: 3
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 0
is free: N/A
is normalized: 0
is proper: N/A
is standard: 0
is trim: 1
is useless: 0
is valid: 0
Exception: proper: invalid automaton
* No circuit of eps-transition
type: mutable_automaton<wordset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 1
number of deterministic states: 1
number of transitions: 5
number of spontaneous transitions: 2
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 0
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper:
type: mutable_automaton<wordset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 1
number of deterministic states: 1
number of transitions: 6
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
forward_proper:
type: mutable_automaton<wordset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 3
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 1
number of deterministic states: 1
number of transitions: 6
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper_here:
type: mutable_automaton<wordset<char_letters(ab)>, z>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 1
number of deterministic states: 1
number of transitions: 6
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1

---------- LAW Z-min+
* Circuit of eps-transition
type: mutable_automaton<wordset<char_letters(ab)>, zmin>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 6
number of spontaneous transitions: 3
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 0
is free: N/A
is normalized: 0
is proper: N/A
is standard: 0
is trim: 1
is useless: 0
is valid: 0
Exception: proper: invalid automaton
* No negative circuit
type: mutable_automaton<wordset<char_letters(ab)>, zmin>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 6
number of spontaneous transitions: 3
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 0
is free: N/A
is normalized: 0
is proper: 0
is standard: 0
is trim: 1
is useless: 0
is valid: 1
proper:
type: mutable_automaton<wordset<char_letters(ab)>, zmin>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
forward_proper:
type: mutable_automaton<wordset<char_letters(ab)>, zmin>
number of states: 3
number of lazy states: 0
number of initial states: 3
number of final states: 1
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
digraph
{
  vcsn_context = "[ab]* → ℤmin"
  rankdir = LR
  edge [arrowhead = vee, arrowsize = .6]
  {
    node [shape = point, width = 0]
    I0
    I1
    I2
    F1
  }
  {
    node [shape = circle, style = rounded, width = 0.5]
    0
    1
    2
  }
  I0 -> 0 [label = "<0>"]
  I1 -> 1 [label = "<-2>"]
  I2 -> 2 [label = "<-1>"]
  0 -> 0 [label = "<5>a"]
  0 -> 1 [label = "<2>a"]
  0 -> 2 [label = "<4>a"]
  1 -> F1 [label = "<0>"]
  1 -> 0 [label = "<4>a"]
  1 -> 1 [label = "<1>a"]
  1 -> 2 [label = "<2>a"]
  2 -> 0 [label = "<2>a"]
  2 -> 1 [label = "<0>a"]
  2 -> 2 [label = "<1>a"]
}
proper_here:
type: mutable_automaton<wordset<char_letters(ab)>, zmin>
number of states: 3
number of lazy states: 0
number of initial states: 1
number of final states: 3
number of accessible states: 3
number of coaccessible states: 3
number of useful states: 3
number of codeterministic states: 0
number of deterministic states: 0
number of transitions: 9
number of spontaneous transitions: 0
is complete: N/A
is deterministic: N/A
is codeterministic: 0
is empty: 0
is eps-acyclic: 1
is free: N/A
is normalized: 0
is proper: 1
is standard: 0
is trim: 1
is useless: 0
is valid: 1
EOF
