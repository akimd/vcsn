  0     1     2     3
 4.15[0m  4.13[0m  4.15[0m  4.00[0m a & 12               # a = std([a-e]*b(<2>[a-e])*)
[34m  N/A[0m  0.30[0m  0.36[0m  0.33[0m a.accessible()       # a = thm([a-m]{20000}).proper(prune=False)
 1.22[0m  1.22[0m  1.16[0m  1.18[0m a.compose(a)         # a = std(['(a,a)'-'(i,z)']{4}), c = [a-z]x[a-z] -> B
 0.48[0m  0.47[0m  0.41[0m  0.41[0m a.compose(a)         # a = thm(['(a,a)'-'(i,z)']{4}), c = [a-z]?x[a-z]? -> B
 3.92[0m  3.75[0m  3.89[0m  3.80[0m a.conjunction(a)     # a = std([a-e]?{50})
[34m  N/A[0m [31m[1m 0.83[0m  0.69[0m  0.70[0m a.conjunction(a)     # a = thm([a-e]?{80})
[31m[1m 1.80[0m  1.40[0m  1.46[0m  1.44[0m a.determinize("weighted") # a = de_bruijn(13), 10x
[34m  N/A[0m [34m  N/A[0m  1.48[0m  1.37[0m a.determinize("weighted") # a = de_bruijn(13), c = [abc] -> F2, 10x
[31m[1m 4.30[0m [32m[1m 3.00[0m  3.25[0m  3.15[0m a.determinize("weighted") # a = de_bruijn(14), 10x
[34m  N/A[0m [34m  N/A[0m  3.24[0m  2.98[0m a.determinize("weighted") # a = de_bruijn(14), c = [abc] -> F2, 10x
[34m  N/A[0m  2.72[0m  3.00[0m  2.88[0m a.determinize("weighted") # a = de_bruijn(16), 2x
[34m  N/A[0m [34m  N/A[0m  2.96[0m  2.78[0m a.determinize("weighted") # a = de_bruijn(16), c = [abc] -> F2, 2x
[34m  N/A[0m  0.26[0m  0.29[0m  0.27[0m a.determinize("weighted") # a = std(([^]+a){100}), c = [a-zA-Z0-9] -> B, 2x
[31m[1m 0.40[0m [32m[1m 0.30[0m  0.38[0m  0.34[0m a.determinize()      # a = de_bruijn(13), 10x
 0.80[0m  0.80[0m  0.83[0m  0.77[0m a.determinize()      # a = de_bruijn(14), 10x
[34m  N/A[0m [34m  N/A[0m  3.22[0m  3.01[0m a.determinize()      # a = de_bruijn(14), c = [abc] -> F2, 10x
[34m  N/A[0m  0.74[0m  0.78[0m  0.73[0m a.determinize()      # a = de_bruijn(16), 2x
[34m  N/A[0m [34m  N/A[0m  2.96[0m  2.75[0m a.determinize()      # a = de_bruijn(16), c = [abc] -> F2, 2x
 0.84[0m  0.80[0m  0.85[0m  0.80[0m a.determinize()      # a = ladybird(18)
 0.84[0m  0.81[0m  0.85[0m  0.79[0m a.determinize()      # a = ladybird(18), c = [a-zA-Z0-9] -> B
 7.43[0m  7.20[0m  7.28[0m  7.31[0m a.determinize()      # a = ladybird(21)
[34m  N/A[0m  1.38[0m  1.39[0m  1.33[0m a.determinize()      # a = std(([^]+a){100}), c = [a-zA-Z0-9] -> B, 2x
[31m[1m 0.54[0m [32m[1m 0.16[0m [32m[1m 0.16[0m [32m[1m 0.15[0m a.evaluate("a"*151)  # a = de_bruijn(150), 1000x
[34m  N/A[0m [34m  N/A[0m  0.07[0m  0.06[0m a.evaluate("abcxyz"*25) # a = std([a-z]*), c = [a-z] -> Z, 1000x
[34m  N/A[0m [34m  N/A[0m  0.08[0m  0.07[0m a.expression("associative", "naive") # a = ladybird(8000)
[31m[1m 0.75[0m [31m[1m 0.73[0m [32m[1m 0.56[0m [32m[1m 0.51[0m a.expression("associative", "naive") # a = std([a-d]?{100})
[34m  N/A[0m [34m  N/A[0m  0.20[0m  0.19[0m a.expression("linear", "delgado") # a = ladybird(2000)
[34m  N/A[0m [34m  N/A[0m  0.24[0m  0.22[0m a.expression("linear", "delgado") # a = std([a-d]?{15})
[34m  N/A[0m [34m  N/A[0m  0.39[0m  0.37[0m a.expression("linear", "naive") # a = ladybird(4000)
[34m  N/A[0m [34m  N/A[0m  0.15[0m  0.14[0m a.expression("linear", "naive") # a = std([a-d]?{9})
[31m[1m 1.75[0m  1.25[0m [32m[1m 0.98[0m [32m[1m 0.94[0m a.format("dot")      # a = std(a?{500}), 5x
[31m[1m 0.40[0m  0.35[0m  0.34[0m [32m[1m 0.31[0m a.format("efsm")     # a = std(a?{500}), 5x
[31m[1m 0.45[0m  0.40[0m  0.40[0m  0.38[0m a.format("fado")     # a = std(a?{500}), 5x
[31m[1m 0.45[0m  0.40[0m  0.40[0m  0.38[0m a.format("grail")    # a = std(a?{500}), 5x
[31m[1m 1.55[0m [32m[1m 0.80[0m [32m[1m 0.64[0m [32m[1m 0.62[0m a.format("tikz")     # a = std(a?{500}), 5x
[34m  N/A[0m [34m  N/A[0m  0.12[0m  0.11[0m a.has_bounded_lag()  # a = std(['(a,x)'-'(b,y)']{1000}*)
[34m  N/A[0m  0.34[0m  0.36[0m  0.37[0m a.has_twins_property() # a = std([a-c]{200}*+[a-c]{200}*, "associative"), c = [abc] -> Zmin, 20x
[32m[1m 3.24[0m [32m[1m 3.28[0m [31m[1m 7.92[0m [31m[1m 7.92[0m a.infiltrate(a)      # a = std([a-e]?{30})
[34m  N/A[0m  0.88[0m  1.00[0m  1.03[0m a.is_cycle_ambiguous() # a = std([a-c]{2000}(<2>ab+a<3>b)), c = [abc] -> Z, 20x
[34m  N/A[0m  0.56[0m  0.57[0m  0.57[0m a.is_functional()    # a = std((a|x){2000}(b|y)), 100x
[34m  N/A[0m [31m[1m 0.60[0m [32m[1m 0.34[0m [32m[1m 0.35[0m a.is_proper()        # a = "", 1000000x
 3.29[0m  3.17[0m  3.40[0m  3.17[0m a.minimize("moore")  # a = std([a-k]{2000}), c = [a-k] -> B
 4.40[0m  4.44[0m  4.75[0m  4.62[0m a.minimize("signature") # a = std([a-g]{800}), c = [a-k] -> B
[34m  N/A[0m [34m  N/A[0m  1.12[0m  1.24[0m a.minimize("weighted") # a = std([a-g]{300}), c = [a-k] -> B
[34m  N/A[0m [34m  N/A[0m  1.27[0m  1.11[0m a.minimize("weighted") # a = std([a-g]{300}), c = [a-k] -> Z
 2.36[0m  2.39[0m  2.55[0m  2.52[0m a.proper()           # a = thm(a?{1200})
 1.89[0m  1.87[0m  1.97[0m  1.90[0m a.reduce()           # a = std([a-g]{300}), c = [a-k] -> Q
 1.26[0m  1.29[0m  1.31[0m  1.32[0m a.reduce()           # a = std([a-g]{300}), c = [a-k] -> Z
[34m  N/A[0m [34m  N/A[0m  0.59[0m  0.58[0m a.scc("dijkstra")    # a = std((abc)*{1000}), 20x
[34m  N/A[0m  0.65[0m  0.72[0m  0.67[0m a.scc("kosaraju")    # a = std((abc)*{1000}), 20x
[34m  N/A[0m  0.71[0m  0.81[0m  0.76[0m a.scc("tarjan_iterative") # a = std((abc)*{1000}), 20x
[34m  N/A[0m  0.56[0m  0.65[0m  0.61[0m a.scc("tarjan_recursive") # a = std((abc)*{1000}), 20x
[31m[1m22.70[0m [31m[1m28.70[0m [32m[1m 0.65[0m [32m[1m 0.63[0m a.shortest(5)        # a = de_bruijn(9), 10x
[31m[1m 1.26[0m [31m[1m 0.93[0m [32m[1m 0.20[0m [32m[1m 0.19[0m a.shortest(5)        # a = std([a-e]?{600}), c = [a-e] -> Z
[34m  N/A[0m [34m  N/A[0m  0.71[0m  0.67[0m a.shortest(5000)     # a = de_bruijn(9), 10x
[34m  N/A[0m [34m  N/A[0m  0.28[0m  0.27[0m a.shortest(5000)     # a = derived_term((\e|x + a|\e)*), c = [a]?x[x]? -> Q, 10x
 3.03[0m  2.92[0m  3.13[0m  3.00[0m a.shuffle(a)         # a = std([a-e]?{50})
[34m  N/A[0m [32m[1m 0.89[0m [31m[1m 1.63[0m [31m[1m 1.66[0m a.sort()             # a = std([a-e]?{700})
[31m[1m 1.18[0m  0.85[0m  0.84[0m  0.84[0m a.synchronizing_word() # a = de_bruijn(6)
[32m[1m 0.58[0m [32m[1m 0.62[0m [31m[1m 0.88[0m [31m[1m 0.85[0m b.expression(e)      # e = "(\e+a)" * 500, 100x
[34m  N/A[0m [34m  N/A[0m  0.40[0m  0.38[0m b.expression(e)      # e = [ab]{20000}, 1000x
[32m[1m 0.16[0m [31m[1m 0.27[0m  0.21[0m  0.20[0m b.format("text")     # b = [abc] -> B, 100000x
[31m[1m33.80[0m [31m[1m32.70[0m [32m[1m 0.21[0m [32m[1m 0.20[0m r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){150}, c = [a-z] -> Z, 10x
[31m[1m30.30[0m [31m[1m29.00[0m [32m[1m 0.14[0m [32m[1m 0.13[0m r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){150}, c = [ab] -> Z, 10x
[34m  N/A[0m [34m  N/A[0m  0.82[0m  0.79[0m r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){300}, c = [a-z] -> Z, 10x
[34m  N/A[0m [34m  N/A[0m  0.58[0m  0.54[0m r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){300}, c = [ab] -> Z, 10x
[34m  N/A[0m [34m  N/A[0m  0.33[0m  0.36[0m r.derived_term("derivation") # r = a?{150}, c = [a] -> Z
[31m[1m 2.20[0m [31m[1m 2.20[0m [32m[1m 0.09[0m [32m[1m 0.08[0m r.derived_term("expansion") # r = (a+b)*b(<2>a+<2>b){150}, c = [a-z] -> Z, 10x
[34m  N/A[0m [34m  N/A[0m  0.38[0m  0.37[0m r.derived_term("expansion") # r = (a+b)*b(<2>a+<2>b){300}, c = [a-z] -> Z, 10x
[34m  N/A[0m [34m  N/A[0m  0.35[0m  0.33[0m r.derived_term("expansion") # r = a?{150}, c = [a] -> Z
[31m[1m 0.22[0m [32m[1m 0.13[0m  0.16[0m  0.16[0m r.format("text")     # r = b.expression("(\e+a)" * 500), 1000x
 0.30[0m  0.30[0m [31m[1m 0.37[0m  0.36[0m r.standard()         # r = (a+b)*b(<2>a+<2>b){20000}, c = [a-z] -> Z, 10x
[31m[1m 1.02[0m  0.87[0m  0.82[0m [32m[1m 0.77[0m read(s)              # s = dot(std(a?{500}))
[31m[1m 0.27[0m  0.21[0m  0.22[0m [32m[1m 0.20[0m read(s)              # s = efsm(std(a?{500}))
[31m[1m 0.16[0m  0.13[0m  0.13[0m [32m[1m 0.12[0m read(s)              # s = fado(std(a?{500}))
  0     1     2     3
  0. v2.0-0001-g6bfe026
  1. v2.0-0423-g841c067
  2. v2.0-1255-gafaf339
  3. v2.1-0010-gd55ef26
