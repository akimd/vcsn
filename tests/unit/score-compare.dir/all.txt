  0     1     2     3
 4.15  4.13  4.15  4.00 a & 12               # a = std([a-e]*b(<2>[a-e])*)
  N/A  0.30  0.36  0.33 a.accessible()       # a = thm([a-m]{20000}).proper(prune=False)
 1.22  1.22  1.16  1.18 a.compose(a)         # a = std(['(a,a)'-'(i,z)']{4}), c = [a-z]x[a-z] -> B
 0.48  0.47  0.41  0.41 a.compose(a)         # a = thm(['(a,a)'-'(i,z)']{4}), c = [a-z]?x[a-z]? -> B
 3.92  3.75  3.89  3.80 a.conjunction(a)     # a = std([a-e]?{50})
  N/A  0.83  0.69  0.70 a.conjunction(a)     # a = thm([a-e]?{80})
 1.80  1.40  1.46  1.44 a.determinize("weighted") # a = de_bruijn(13), 10x
  N/A   N/A  1.48  1.37 a.determinize("weighted") # a = de_bruijn(13), c = [abc] -> F2, 10x
 4.30  3.00  3.25  3.15 a.determinize("weighted") # a = de_bruijn(14), 10x
  N/A   N/A  3.24  2.98 a.determinize("weighted") # a = de_bruijn(14), c = [abc] -> F2, 10x
  N/A  2.72  3.00  2.88 a.determinize("weighted") # a = de_bruijn(16), 2x
  N/A   N/A  2.96  2.78 a.determinize("weighted") # a = de_bruijn(16), c = [abc] -> F2, 2x
  N/A  0.26  0.29  0.27 a.determinize("weighted") # a = std(([^]+a){100}), c = [a-zA-Z0-9] -> B, 2x
 0.40  0.30  0.38  0.34 a.determinize()      # a = de_bruijn(13), 10x
  N/A   N/A  1.38  1.38 a.determinize()      # a = de_bruijn(13), c = [abc] -> F2, 10x
 0.80  0.80  0.83  0.77 a.determinize()      # a = de_bruijn(14), 10x
  N/A   N/A  3.22  3.01 a.determinize()      # a = de_bruijn(14), c = [abc] -> F2, 10x
  N/A  0.74  0.78  0.73 a.determinize()      # a = de_bruijn(16), 2x
  N/A   N/A  2.96  2.75 a.determinize()      # a = de_bruijn(16), c = [abc] -> F2, 2x
 0.84  0.80  0.85  0.80 a.determinize()      # a = ladybird(18)
 0.84  0.81  0.85  0.79 a.determinize()      # a = ladybird(18), c = [a-zA-Z0-9] -> B
 7.43  7.20  7.28  7.31 a.determinize()      # a = ladybird(21)
  N/A  1.38  1.39  1.33 a.determinize()      # a = std(([^]+a){100}), c = [a-zA-Z0-9] -> B, 2x
 0.54  0.16  0.16  0.15 a.evaluate("a"*151)  # a = de_bruijn(150), 1000x
  N/A   N/A  0.07  0.06 a.evaluate("abcxyz"*25) # a = std([a-z]*), c = [a-z] -> Z, 1000x
  N/A   N/A  0.10  0.10 a.expression("associative", "delgado") # a = ladybird(2000)
  N/A   N/A  0.08  0.07 a.expression("associative", "naive") # a = ladybird(8000)
 0.75  0.73  0.56  0.51 a.expression("associative", "naive") # a = std([a-d]?{100})
  N/A   N/A  0.20  0.19 a.expression("linear", "delgado") # a = ladybird(2000)
  N/A   N/A  0.24  0.22 a.expression("linear", "delgado") # a = std([a-d]?{15})
  N/A   N/A  0.39  0.37 a.expression("linear", "naive") # a = ladybird(4000)
  N/A   N/A  0.15  0.14 a.expression("linear", "naive") # a = std([a-d]?{9})
 1.75  1.25  0.98  0.94 a.format("dot")      # a = std(a?{500}), 5x
 0.40  0.35  0.34  0.31 a.format("efsm")     # a = std(a?{500}), 5x
 0.45  0.40  0.40  0.38 a.format("fado")     # a = std(a?{500}), 5x
 0.45  0.40  0.40  0.38 a.format("grail")    # a = std(a?{500}), 5x
 1.55  0.80  0.64  0.62 a.format("tikz")     # a = std(a?{500}), 5x
  N/A   N/A  0.03  0.03 a.has_bounded_lag()  # a = std(['(a,x)'-'(b,y)']*{600})
  N/A   N/A  0.12  0.11 a.has_bounded_lag()  # a = std(['(a,x)'-'(b,y)']{1000}*)
  N/A  0.34  0.36  0.37 a.has_twins_property() # a = std([a-c]{200}*+[a-c]{200}*, "associative"), c = [abc] -> Zmin, 20x
 3.24  3.28  7.92  7.92 a.infiltrate(a)      # a = std([a-e]?{30})
  N/A  0.88  1.00  1.03 a.is_cycle_ambiguous() # a = std([a-c]{2000}(<2>ab+a<3>b)), c = [abc] -> Z, 20x
  N/A  0.56  0.57  0.57 a.is_functional()    # a = std((a|x){2000}(b|y)), 100x
  N/A  0.60  0.34  0.35 a.is_proper()        # a = "", 1000000x
 3.29  3.17  3.40  3.17 a.minimize("moore")  # a = std([a-k]{2000}), c = [a-k] -> B
 4.40  4.44  4.75  4.62 a.minimize("signature") # a = std([a-g]{800}), c = [a-k] -> B
  N/A   N/A  1.12  1.24 a.minimize("weighted") # a = std([a-g]{300}), c = [a-k] -> B
  N/A   N/A  1.27  1.11 a.minimize("weighted") # a = std([a-g]{300}), c = [a-k] -> Z
 2.36  2.39  2.55  2.52 a.proper()           # a = thm(a?{1200})
 1.89  1.87  1.97  1.90 a.reduce()           # a = std([a-g]{300}), c = [a-k] -> Q
 1.26  1.29  1.31  1.32 a.reduce()           # a = std([a-g]{300}), c = [a-k] -> Z
  N/A   N/A  0.59  0.58 a.scc("dijkstra")    # a = std((abc)*{1000}), 20x
  N/A  0.65  0.72  0.67 a.scc("kosaraju")    # a = std((abc)*{1000}), 20x
  N/A  0.71  0.81  0.76 a.scc("tarjan_iterative") # a = std((abc)*{1000}), 20x
  N/A  0.56  0.65  0.61 a.scc("tarjan_recursive") # a = std((abc)*{1000}), 20x
22.70 28.70  0.65  0.63 a.shortest(5)        # a = de_bruijn(9), 10x
 1.26  0.93  0.20  0.19 a.shortest(5)        # a = std([a-e]?{600}), c = [a-e] -> Z
  N/A   N/A  0.71  0.67 a.shortest(5000)     # a = de_bruijn(9), 10x
  N/A   N/A  0.28  0.27 a.shortest(5000)     # a = derived_term((\e|x + a|\e)*), c = [a]?x[x]? -> Q, 10x
 3.03  2.92  3.13  3.00 a.shuffle(a)         # a = std([a-e]?{50})
  N/A  0.89  1.63  1.66 a.sort()             # a = std([a-e]?{700})
 1.18  0.85  0.84  0.84 a.synchronizing_word() # a = de_bruijn(6)
 0.58  0.62  0.88  0.85 b.expression(e)      # e = "(\e+a)" * 500, 100x
  N/A   N/A  0.40  0.38 b.expression(e)      # e = [ab]{20000}, 1000x
 0.16  0.27  0.21  0.20 b.format("text")     # b = [abc] -> B, 100000x
  N/A   N/A  0.91  0.91 p.trie()             # p = [a-j]{6}
33.80 32.70  0.21  0.20 r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){150}, c = [a-z] -> Z, 10x
30.30 29.00  0.14  0.13 r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){150}, c = [ab] -> Z, 10x
  N/A   N/A  0.82  0.79 r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){300}, c = [a-z] -> Z, 10x
  N/A   N/A  0.58  0.54 r.derived_term("derivation") # r = (a+b)*b(<2>a+<2>b){300}, c = [ab] -> Z, 10x
  N/A   N/A  0.33  0.36 r.derived_term("derivation") # r = a?{150}, c = [a] -> Z
 2.20  2.20  0.09  0.08 r.derived_term("expansion") # r = (a+b)*b(<2>a+<2>b){150}, c = [a-z] -> Z, 10x
  N/A   N/A  0.38  0.37 r.derived_term("expansion") # r = (a+b)*b(<2>a+<2>b){300}, c = [a-z] -> Z, 10x
  N/A   N/A  0.35  0.33 r.derived_term("expansion") # r = a?{150}, c = [a] -> Z
 0.22  0.13  0.16  0.16 r.format("text")     # r = b.expression("(\e+a)" * 500), 1000x
 0.30  0.30  0.37  0.36 r.standard()         # r = (a+b)*b(<2>a+<2>b){20000}, c = [a-z] -> Z, 10x
 0.40  0.40  0.40  0.40 r.thompson()         # r = (a+b)*b(<2>a+<2>b){20000}, c = [a-z]? -> Z, 10x
 1.02  0.87  0.82  0.77 read(s)              # s = dot(std(a?{500}))
 0.27  0.21  0.22  0.20 read(s)              # s = efsm(std(a?{500}))
 0.16  0.13  0.13  0.12 read(s)              # s = fado(std(a?{500}))
  0     1     2     3
  0. v2.0-0001-g6bfe026
  1. v2.0-0423-g841c067
  2. v2.0-1255-gafaf339
  3. v2.1-0010-gd55ef26
