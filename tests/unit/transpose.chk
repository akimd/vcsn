#! /bin/sh

## ------------------------ ##
## vcsn-transpose(ratexp).  ##
## ------------------------ ##

# check INPUT OUTPUT
# ------------------
check ()
{
  run 0 "$2" -vcsn-transpose $ctx -E -e "$1"
}

check2 ()
{
  check "$1" "$2"
  check "$2" "$1"
}

ctx='-C lal_char(abcd)_b'
check '\e' '\e'
check '\z' '\z'
check 'a' 'a'
check 'ab' 'b.a'
check 'abc+aba' '(a.b.a)+(c.b.a)'
check '(ab)*' '(b.a)*'

ctx='-C law_char(abcd)_b'
check '\e' '\e'
check '\z' '\z'
check 'a' 'a'
check 'ab' 'ba'
check 'abc+aba' '(aba)+(cba)'
check '(ab)*' '(ba)*'

ctx='-W zrr -Lw'
check2 '{{{2}xy}ef}abcd' '{{{2}yx}fe}dcba'
check2 '({ef}(abcd)*{gh})' '({hg}(dcba)*{fe})'


## --------------------------- ##
## vcsn-transpose(automaton).  ##
## --------------------------- ##

# check CONTEXT RATEXP < DIFF
# ---------------------------
# Compare the standard-of RATEXP to its transposed, expect DIFF.
check ()
{
  run 0 '' -vcsn-standard-of -E -C "$1" -O dot -e "$2" -o forward.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f forward.out -o transposed.out

  run 1 - -diff -t -W80 --suppress-common-lines -y forward.out transposed.out
}

check 'lal_char(abcd)_b' 'a' <<EOF
    I1                                 |      I2
    F2                                 |      F1
  I1 -> 1                              |    I2 -> 2
  1 -> 2 [label = "a"]                 |    1 -> F1
  2 -> F2                              |    2 -> 1 [label = "a"]
EOF

check 'lal_char(abcd)_b' 'abc' <<EOF
    I1                                 |      I4
    F4                                 |      F1
  I1 -> 1                              |    I4 -> 4
  1 -> 2 [label = "a"]                 |    1 -> F1
  2 -> 3 [label = "b"]                 |    2 -> 1 [label = "a"]
  3 -> 4 [label = "c"]                 |    3 -> 2 [label = "b"]
  4 -> F4                              |    4 -> 3 [label = "c"]
EOF

check 'law_char(abcd)_ratexpset<law_char(abcd)_b>' '{ab}(\e+a+b({abc}c{bcd})*){cd}' <<EOF
                                       >      I2
                                       >      I3
                                       >      I4
    F2                                 <
    F3                                 <
    F4                                 <
  I1 -> 1                              |    I1 -> 1 [label = "{(dc).(ba)}"]
  1 -> F1 [label = "{(ab).(cd)}"]      |    I2 -> 2 [label = "{dc}"]
  1 -> 2 [label = "{ab}a"]             |    I3 -> 3 [label = "{dc}"]
  1 -> 3 [label = "{ab}b"]             |    I4 -> 4 [label = "{dc}"]
  2 -> F2 [label = "{cd}"]             |    1 -> F1
  3 -> F3 [label = "{cd}"]             |    2 -> 1 [label = "{ba}a"]
  3 -> 4 [label = "{(abc).(bcd)}c"]    |    3 -> 1 [label = "{ba}b"]
  4 -> F4 [label = "{cd}"]             |    4 -> 3 [label = "{(dcb).(cba)}c"]
  4 -> 4 [label = "{(abc).(bcd)}c"]    |    4 -> 4 [label = "{(dcb).(cba)}c"]
EOF


# involution AUTOMATON
# --------------------
# Check that transposition is an involution on AUTOMATON.
involution ()
{
  run 0 '' -vcsn-transpose -A -f $1 -o transpose.out
  cp $1 out.exp
  run 0 out.exp -vcsn-transpose -A -f transpose.out
}

run 0 '' -vcsn-de-bruijn -C 'lal_char(abcd)_z' -o de-bruin-2.dot 2
involution de-bruin-2.dot

## -------------- ##
## minimization.  ##
## -------------- ##

# check_minimization < OUT.EXP
check_minimization ()
{
  run 0 '' -vcsn-standard-of "$@" -o a.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f a.out -o at.out
  run 0 '' -vcsn-determinize -I dot -O dot -A -f at.out -o atd.out
  run 0 '' -vcsn-transpose -I dot -O dot -A -f atd.out -o atdt.out
  run 0 -  -vcsn-determinize -I dot -O dot -A -f atdt.out
}

check_minimization -C 'lal_char(ab)_b' -e 'a+a+a+a' <<EOF
digraph
{
  vcsn_context = "lal_char(ab)_b"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I1
    F2
  }
  { 1 2 3 }
  I1 -> 1
  1 -> 2 [label = "a"]
  1 -> 3 [label = "b"]
  2 -> F2
  2 -> 3 [label = "a, b"]
  3 -> 3 [label = "a, b"]
}
EOF


## ---------------------- ##
## Using unit/transpose.  ##
## ---------------------- ##

run 0 - unit/transpose <<EOF
digraph
{
  vcsn_context = "law_char(abcd)_ratexpset<lal_char(abcd)_b>"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I1
    I3
  }
  { 1 2 3 }
  I1 -> 1 [label = "{a.b.c.d}"]
  I3 -> 3 [label = "{a.b.c.d}"]
  1 -> 1 [label = "{a.b}cd"]
  1 -> 2 [label = "{a.b.c.d}cd"]
  2 -> 3 [label = "cd"]
}
digraph
{
  vcsn_context = "law_char(abcd)_ratexpset<lal_char(abcd)_b>"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    F1
    F3
  }
  { 1 2 3 }
  1 -> F1 [label = "{d.c.b.a}"]
  1 -> 1 [label = "{b.a}dc"]
  2 -> 1 [label = "{d.c.b.a}dc"]
  3 -> F3 [label = "{d.c.b.a}"]
  3 -> 2 [label = "dc"]
}
digraph
{
  vcsn_context = "law_char(abcd)_ratexpset<lal_char(abcd)_b>"
  rankdir = LR
  node [shape = circle]
  {
    node [style = invis, shape = none, label = "", width = 0, height = 0]
    I1
    F2
  }
  { 1 2 }
  I1 -> 1 [label = "{a.b.c.d}"]
  1 -> 1 [label = "{a.b}cd"]
  1 -> 2 [label = "{a.a.b.b}cd"]
  2 -> F2
}
EOF
