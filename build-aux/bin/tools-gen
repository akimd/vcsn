#! /usr/bin/env python

import argparse
import copy
import json
import re
import string
import sys

fun_def = string.Template('''
      {"$algo_name",
       {{$type_list},
        $declaration,
        [](const auto& args, const dyn::context& ctx)
        {
$body
        }}},
''')

fun_body_return =\
'''$conversion_list
           auto res = dyn::$algo_name($arg_list);
           std::cout << res;'''

fun_body_void =\
'''$conversion_list
           dyn::$algo_name(
           $arg_list
     );'''

conversions_indent = '           '

fun_doc_def = string.Template('''
      {"$algo_name",
       {$declaration,
        $doc
       }},
''')

def fun_def_template(fun):
    body = fun_body_void if fun['result'] == 'void' else fun_body_return
    return string.Template(fun_def.safe_substitute(body=body))


def ignore(fun):
    '''Report that we don't process this case.'''
    print('warning: ignoring: {fun}({formals}) -> {result}'
          .format_map(fun), file=sys.stderr)

# These types are not supported by tools yet, meaning that
# any function using them as parameter types will be ignored
# when generating the bindings and won't be callable from
# tools.
# FIXME: Add support for these types.
unsupported_types = [
    'direction',
    'expansion',
    'identities',
    'letter_class_t',
    'std::istream',
    'std::vector<automaton>',
    'std::vector<context>',
    'std::vector<expansion>',
    'std::vector<expression>',
    'std::vector<polynomial>',
    'std::vector<unsigned>',
    ]

# We don't want to see these types in the documentation.
# This dictionnary map them to the name used instead.
ugly_types = {
    'int': 'number',
    'unsigned': 'number',
    'boost::optional<unsigned>': 'number',
    }

def gen_function_doc_decl(fun, formals):
    '''Generate the documentation entry of an algorithm
       from its formals parameters. Called once per algorithm
       even when optional arguments are involved.'''

    formals_def = []

    for f in formals:
        f_def = {}
        f_def['arg'] = f['arg'].upper()

        if f['class'] == 'context':
            continue

        if f['class'][3:5] == "::":
            f['class'] = f['class'][5:]

        f_def['type'] = f['class'] if f['class'] not in ugly_types else ugly_types[f['class']]

        if f['class'].startswith("boost::optional"):
            f_def['default'] = ""
        elif f['default'] is None:
            f_def['default'] = None
        else:
            f_def['default'] = '='+f['default']

        format_string = '{arg}:{type}' if f_def['default'] is None else '[{arg}{default}:{type}]'
        formals_def.append(format_string.format(arg=f_def['arg'],
            default=f_def['default'],
            type=f_def['type']).lstrip())

    declaration = 'R"tools_doc( {dynfun}: {formals} -> {result})tools_doc"' \
                    .format(dynfun=fun['dynfun'],
                            formals=' '.join(formals_def),
                            result=fun['result'])

    return fun_doc_def.substitute(
            algo_name=fun['dynfun'],
            declaration=declaration,
            doc=format_function_doc(fun, formals))

def format_function_doc(fun, formals):
    res = []
    doc = fun['doc']
    # First, the short decription.
    res = fun['doc']['desc']

    def is_supported(name):
        for formal in formals:
            if formal['arg'] == name:
                return True
        return False

    # Filter for unsupported parameters.
    doc['params'] = [p for p in doc['params'] if is_supported(p['name'])]
    # Reconstruct the parameter list to make it look like other fields.
    doc['params'] = [[r'\param ' + p['name'].upper()
            + p['desc'][0]] + p['desc'][1:]
            for p in doc['params']]
    # Flatten it.
    doc['params'] = sum(doc['params'], [])

    def process_block(block, name, mark, indent=False):
        if block != []:
            is_after_dash = False
            for i, line in enumerate(block):
                # If line is indented, remove some indent
                # to keep it aligned even after \param or \pre
                # are removed. Once we start seeing lists, we don't
                # do that anymore.
                if indent and line.lstrip() != '':
                    if line.lstrip()[0] == '-':
                        is_after_dash = True
                    if line[:len(name)+2] == ' ' * (len(name)+2) and not is_after_dash:
                        line = line[len(name)+2:]
                block[i] = '  '+line.replace('\\{} '.format(name), '')
            block.insert(0, mark)

    process_block(doc['params'], 'param', 'Parameters:', indent=True)
    process_block(doc['pre'], 'pre', 'Preconditions:')
    process_block(doc['returns'], 'returns', 'Return value:')

    res += doc['params'] + doc['pre'] + doc['returns']

    # Remove \a and uppercase argument name.
    res = ['  ' + re.sub(r'\\a (\S*)', lambda m: m.group(1).upper(), l) for l in res]

    res = [l for l in res if l.strip() != '']

    return 'R"tools_doc('+ '\n'.join(res) +')tools_doc"'

def process_function(fun):
    '''Process a function in dyn/algo.hh'''
    formals = fun['formals']

    decl = gen_function_decl(fun, formals)
    algos.append(decl)

    doc_decl = ""
    if decl != "":
        doc_decl = gen_function_doc_decl(fun, formals)

    # Generate the function without its default arguments too.
    while formals and formals[-1]['default'] is not None:
        formals.pop()
        decl = gen_function_decl(fun, formals)
        algos.append(decl)
        if decl != "" and doc_decl == "":
            doc_decl = gen_function_doc_decl(fun, formals)

    algos_doc.append(doc_decl)

def gen_function_decl(fun, formals):
    '''Generate the binding of an algorithm from its declaration
        and its parameters and return it (as a string).'''
    conversions = []
    types = []
    args = []
    removed_args = 0

    # Copy formals to avoid interfering with the documentation generation.
    formals = copy.deepcopy(formals)

    # Construct the function declaration for documentation.
    declaration = '"' + fun['result'] + ' ' + fun['dynfun'] + '(' +\
        ', '.join(f['type'] + ' ' + f['arg'] for f in formals) + ')"'

    for i, formal in enumerate(formals):
        i = i - removed_args
        if formal['class'] in unsupported_types:
            return ""

        # We don't match on the context, and don't require it
        # as an argument in tools.
        if formal['class'] == "context":
            if formal['default'] is None:
                args.append('ctx')
                removed_args += 1
                continue
            else:
                return ""

        # dyn::word isn't really a type, it's just
        # an indication for us to use a word context.
        if formal['class'] == 'word':
            formal['class'] = 'label'
            formal['context'] = 'make_word_context(ctx)'
        else:
            formal['context'] = 'ctx'

        # The only ostream supported is std::cout.
        if formal['class'] == "std::ostream":
            if formal['default'] is None:
                args.append('std::cout')
                removed_args += 1
                continue
            else:
                return ""

        # Remove std:: and dyn:: for the Type enum.
        if formal['class'][3:5] == "::":
            formal['type_enum'] = formal['class'][5:]
        # and append an underscore for built-in types.
        elif formal['class'] in ['bool', 'float']:
            formal['type_enum'] = formal['class'] + '_'
        elif formal['class'] in ['int', 'unsigned', 'boost::optional<unsigned>']:
            formal['type_enum'] = 'number'
        else:
            formal['type_enum'] = formal['class']

        # Qualify dyn types to avoid possible conflicts.
        if formal['class'] in dyn_types:
            formal['class'] = 'dyn::' + formal['class']

        # Convert the argument from a string to
        # the actual type for the function call.
        conversions.append(conversions_indent+
                "auto a{} = vcsn::tools::convert<{}>(args[{}].arg, {}, args[{}].input_format);"
                .format(i, formal['class'], i, formal['context'], i))

        args.append('a{}'.format(i))
        types.append('type::'+formal['type_enum'])

    return fun_def_template(fun).substitute(
            algo_name=fun['dynfun'],
            declaration=declaration,
            conversion_list='\n'.join(conversions),
            type_list=', '.join(types),
            arg_list=(', ').join(args))

# The list of generated bindings.
algos = []
algos_doc = []


# The list of dyn types, loaded from JSON.
dyn_types = []

def add_cat(algos):
    for t in dyn_types:
        if t == 'context':
            continue
        algos.append({
                'dynfun': 'cat',
                'formals': [
                    {
                        'arg': 'arg',
                        'class': t,
                        'const': 'const',
                        'default': None,
                        'type': 'const {}&'.format(t),
                    }],
                'result': '{}'.format(t),
                'doc': {
                    'desc': ['Return its argument.'],
                    'params': [],
                    'pre': [],
                    'returns':[]
                    }
                })

def process_header(fn):
    '''Process all functions from a header `fn`.'''
    with open(fn, mode='r') as f:
        json_ = json.load(f)
        dyn_types.extend(json_['dyn_types'])
        add_cat(json_['algos'])
        for fun in json_['algos']:
            process_function(fun)

def output(header):
    '''Generate the implementation of Tools C++ bindings.'''
    res = string.Template( r'''// Generated, do not edit by hand.

#include <initializer_list>
#include <iostream>
#include <map>

#include <vcsn/dyn/algos.hh>

#include "$header"

#pragma GCC diagnostic ignored "-Wunused-parameter"

namespace vcsn
{
  namespace tools
  {
    const std::unordered_multimap<std::string, algo> algos
    {$algos    };

    const std::unordered_multimap<std::string, algo_doc> algos_doc
    {$algos_doc    };
  }
}''')

    return res.substitute(header=header, algos=''.join(algos), algos_doc=''.join(algos_doc))



parser = argparse.ArgumentParser(description='Generate tools functions',
                                 formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog='''
Read `dyn/algos.hh` and generate its functions in C++,
to be used by the tools CLI interface.
''')

parser.add_argument('--output',
                    type=argparse.FileType('w'), default='-',
                    help='implementation file to generate')
parser.add_argument('--header',
                    help='location of vcsn-tools.hh')
parser.add_argument('input', type=str, default=None,
                    help='''JSON file to process.''')
args = parser.parse_args()

process_header(args.input)

print(output(args.header), file=args.output)
