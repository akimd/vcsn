#! /bin/sh

set -e

fatal ()
{
  local i
  for i
  do
    echo >&2 "$i"
  done
  exit 1
}

config ()
{
  # Call `vcsn-tools`, not `vcsn`, as `vcsn` is this very script...
  exec vcsn-tools configuration "configuration.$1"
}

# _Append_ VCSN_PYTHONDIR, not prepend, so that the user can still
# override this path via $PYTHONPATH.  Note in particular that the
# builddir-tests need to override $PYTHONPATH to use non-installed
# modules, which would them be overridden here and installed files
# would be used instead.
: ${VCSN_PYTHONDIR='@PYEXECDIR@'}
export VCSN_PYTHONDIR
PYTHONPATH=$PYTHONPATH:$VCSN_PYTHONDIR
export PYTHONPATH

# Also import our changes to PYTHONPATH.
MYPYPATH=$MYPYPATH:$PYTHONPATH:$VCSN_PYTHONDIR
export MYPYPATH

# Used by commands such as vcsn-notebook.  Avoids the need for a
# vcsn-notebook.in.
: ${VCSN_DATADIR='@DATADIR@'}
export VCSN_DATADIR

# Where our main executables are.
: ${VCSN_BINDIR='@BINDIR@'}
export VCSN_BINDIR

# Where our auxiliary executables are.
: ${VCSN_LIBEXECDIR='@LIBEXECDIR@'}
export VCSN_LIBEXECDIR

# If we are not installed, set the dynamic library path.
if test x"$VCSN_DYLD_LIBRARY_PATH" != x; then
  DYLD_LIBRARY_PATH=$VCSN_DYLD_LIBRARY_PATH
  export DYLD_LIBRARY_PATH
fi

# If there are environment variables that we wish to set, do it now.
# For instance VCSN_ENV=LD_PRELOAD=libclang_rt.asan-x86_64.so`.  This
# is especially useful on macOS with SIP enabled.
if test x"$VCSN_ENV" != x; then
  save_IFS=$IFS
  IFS=';'
  for v in $VCSN_ENV
  do
    eval "export $v"
  done
  IFS=$save_IFS
fi

# Find our auxiliary executables.  Also find our public tools: think
# for instance that we are not in the path, but the user called `vcsn`
# with a qualified path: we must be able to call `vcsn compile`
# etc. without requiring the user to put us in her path.
: ${VCSN_PATH=$VCSN_BINDIR:$VCSN_LIBEXECDIR:$PATH}
PATH=$VCSN_PATH
export PATH

export PYTHON=$(config python)
export IPYTHON=$(config ipython)

# The Tools commands.
commands ()
{
  exec vcsn-tools --commands
}

# The Tools commands as a grep pattern.
commands_pattern ()
{
  commands |
    tr -d '\n' |
    sed -e 's/^ */^(/;s/  */|/g;s/$/)$/'
}

help ()
{
  cat <<EOF
usage: vcsn COMMAND ARGS...

COMMAND can be:

- notebook: run Vcsn as an IPython Notebook.
- python, ipython: run Python/IPython.
- diagnose: check that Vcsn is properly installed.
- doc: open the documentation.
- gdb: run gdb with a type pretty-printer.

- compile: compile a C++ program using libvcsn.
- run: set up the environment to find Vcsn, and run the ARGS...
- ps: display Vcsn compilation jobs.
- demangle: improve readability of C++ compiler error messages.

- efstcompile, efstdecompile: compile/decompile EFST files

- version: display version tag.

- score, score-compare: generate/compare benchmarks.

- $(commands | sed -e '1s/^  //'):
  run the corresponding algorithm.

For more information, run:

  $ vcsn COMMAND -h

For instance:

  $ vcsn derived-term -C 'lal_char(abc), b' -e '(a+b+a)*' |
     vcsn determinize |
     vcsn minimize |
     vcsn to-expression
EOF
  exit 0
}

version ()
{
  authors=$(config authors)
  version=$(config version)
  url=$(config url)
cat <<EOF
vcsn (Vcsn $version)
Copyright (C) 2017 Vcsn Group.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

$(echo "Written by $authors." | fold -s -w 78)

For more information, see <$url>.
EOF
  exit 0
}

vcsn_doc_open ()
{
    jupyter=$(config jupyter)
    docdir=$(config docdir)
    nbdir=$docdir/notebooks
    if [[ ! -f "$nbdir/$1.ipynb" ]]; then
        fatal "vcsn doc: no documentation for $1"
    fi
    if "$jupyter" notebook --version >/dev/null; then
        exec "$jupyter" notebook "$nbdir/$1.ipynb"
    elif [[ -x /usr/bin/open ]]; then
        open "$nbdir/$1.html"
        exit 0
    else
        xdg-open "$nbdir/$1.html"
        exit 0
    fi
    fatal "vcsn doc: cannot open $nbdir/$1.html"
}

vcsn_doc ()
{
    case $1 in
        (-h|--help)
            cat <<EOF
Usage: vcsn doc [FUNCTION|PAGE]

FUNCTION is the name of the Python function, for instance

  \$ vcsn doc automaton.determinize

PAGE is a chapter of the documentation, for instance

  \$ vcsn doc Automata

By default open the '!Read-me-first' page.

If Jupyter notebook is installed, it will be used to display the
documentation, otherwise the plain HTML documentation is opened.
EOF
            exit 0;;

        (index) vcsn_doc_open 'Algorithms';;
        ('')    vcsn_doc_open '!Read-me-first';;
        (*)     vcsn_doc_open "$1";;
    esac
}


if test $# = 0; then
    fatal 'vcsn: missing argument' "Try 'vcsn --help' for more information."
fi

case $1 in
  ('--export') ;; # We are sourced to set up the environment.
  (run) shift 1; exec "$@";;
  (-h|--help) help;;
  (-v|--version) version;;
  (version) config version;;

  (compile|demangle|ps|score|score-compare)
      prog=$(command -v "vcsn-$1")
      shift
      exec "$PYTHON" "$prog" "$@";;

  (config)
      shift
      exec config "$@";;

  (check|diagnose|doctor)
      shift
      exec vcsn-diagnose "$@";;

  (doc)
      shift
      vcsn_doc "$@";;

  (efstcompile|efstdecompile)
      exec "$@";;

  (python) shift; exec "$PYTHON" "$@";;
  (ipython) shift; exec "$IPYTHON" "$@";;
  (python*|ipython*|jupyter*) exec "$@";;

  (*.ipynb) exec vcsn-notebook "$@";;
  (*.py)    exec "$PYTHON" "$@";;

  (*)
      if echo "$1" | grep -E "$(commands_pattern)" >/dev/null; then
          exec vcsn-tools "$@"
      else
          prog=vcsn-$1
          shift
          exec "$prog" "$@"
      fi;;
esac

# Local Variables:
# mode: shell-script
# End:
