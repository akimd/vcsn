#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
from vcsn_config import config

me = sys.argv[0]

import argparse

class AppendStringAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(AppendStringAction, self).__init__(option_strings, dest, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        value = getattr(namespace, self.dest) + " " + values
        setattr(namespace, self.dest, value)

parser = argparse.ArgumentParser(description = 'Compile.')
parser.add_argument('input', help='source file to compile')
parser.add_argument('-shared', help='create a shared lib instead of an executable',
                    action='store_true')
parser.add_argument('-v', '--verbose', help='Be verbose',
                    action='count', default=config['verbose'])
parser.add_argument('--ccache', help='Compiler prefix',
                    default=config['ccache'])
parser.add_argument('--cppflags', help='Preprocessor flags',
                    default=config['cppflags'])
parser.add_argument('--cxx', help='Compiler',
                    default=config['cxx'])
parser.add_argument('--cxxflags', help='Compiler flags',
                    default=config['cxxflags'])
parser.add_argument('--ldflags', help='Linker flags',
                    default=config['ldflags'])
parser.add_argument('--extra-ldflags', help='Additional linker flags',
                    action=AppendStringAction, dest='ldflags')

# Parse the arguments, and complete the 'args' object with the value
# from the configuration (cxx, cxxflags, etc.).
args = parser.parse_args()
if 2 <= args.verbose:
    for k in sorted(args.__dict__):
        print(k + ":", getattr(args, k), file=sys.stderr)

# Strip extension.
args.base = args.input[:-3]
# Beware of concurrency issues: insert pid in the name to avoid problem.
args.pid = str(os.getpid())
args.tmp = args.base + '.' + args.pid

def fmt(s):
    '''Substitute the value in args.'''
    return s.format(**args.__dict__)

def run(cmd):
    cmd = fmt(cmd)
    if args.verbose:
        print("run:", cmd, file=sys.stderr)
    try:
        retcode = subprocess.call(cmd, shell=True)
        if retcode:
            if retcode < 0:
                print(me + ": child was terminated by signal", -retcode, file=sys.stderr)
            else:
                print(me + ": child returned", retcode, file=sys.stderr)
            sys.exit(retcode)
    except OSError as e:
        print(me + ": execution failed:", e, file=sys.stderr)
        sys.exit(retcode)

if args.shared:
    run("LC_ALL=C {ccache} {cxx} {cppflags} {cxxflags} -fPIC -c -o '{tmp}.o' '{base}.cc'")
    run("LC_ALL=C {cxx} {cxxflags} {ldflags} -fPIC -lvcsn '{tmp}.o' -shared -o '{tmp}.so'")
    os.rename(fmt('{tmp}.so'), fmt('{base}.so'))
else:
    run("LC_ALL=C {ccache} {cxx} {cppflags} {cxxflags} {ldflags} -lvcsn -o '{base}' '{base}.cc'")
