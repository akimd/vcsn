#! /usr/bin/env python

from __future__ import print_function
import os, re, sys

bench = dict()

def normalize(k):
    k = re.sub(r'a\*\*(\d+) ', r'a & \1', k)
    # Fix: spello.
    k = re.sub(r'de_buijn', 'de_bruijn', k)
    # Fix: extraneous paren.
    k = re.sub(r'ladybird\(21\)\)', 'ladybird(21)', k)
    # Fix: Incorrect use of .format.
    k = re.sub(r'(a.(?:product|shuffle)\(a\) *# a = std\(\{\}\).format\(r\))',
               lambda m: m.group(1).replace('{}', '[a-e]?{50})'),
               k)
    # Fix: now use 's' to denote a string, instead of 'a'.
    k = re.sub(r'read\(a\)              # a =',
               r'read(s)              # s =', k)
    # Now we display the number of repetitions.
    k = re.sub(r'(# a = de_bruijn\(150\))$', r'\1, 1000x', k)
    k = re.sub(r'(# e = "\(\\e\+a\)" \* 500)$', r'\1, 100x', k)
    k = re.sub(r'(# r = b\.ratexp\("\(\\e\+a\)" \* 500\))$', r'\1, 1000x', k)
    # Now, instead of "   on [a-z]  -> Z", ", c = [a-z] -> Z".
    k = re.sub(r' +on (\[.*?\][?*]?) *-> *([BQZ])',
               r', c = \1 -> \2', k)
    k = re.sub(r'a = lal\(a-zA-Z0-9\).ladybird\(18\)',
               r'a = ladybird(18), c = [a-zA-Z0-9] -> B', k)
    return k

def read(fn):
    with open(fn) as f:
        for line in f:
            v, k = map(str.strip, line.split(':', 2))
            k = normalize(k)
            if k not in bench:
                bench[k] = dict()
            bench[k][fn] = v

for fn in sys.argv[1:]:
    read(fn)

for k in sorted(bench.keys()):
    for fn in sys.argv[1:]:
        v = bench[k][fn] if fn in bench[k] else "N/A"
        print("{:6}".format(v), end = ' ')
    print(k)
