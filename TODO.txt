* trivial identities
As a goal, we want every rational expression to yield the same result
in lal and law.  This is a failure:

  $ vcsn-cat -C 'lal_char_z' -e 'ab{3}' -E
  (a.b){3}
  $ vcsn-cat -C 'law_char_z' -e 'ab{3}' -E
  {3}ab

Note that TAF-Kit's documentation (Section 2.2.1) precisely reports
that *both* should yield "{3}ab":

  Caveat: The definition of the identity Cat corresponds to what is
  actually implemented in Vaucanson 1.4 and is somehow a mistake. A more
  natural definition would be m{k} â‡’ {k}m with m any element of the
  monoid. This may be corrected in forthcoming revisions of Vaucanson
  1.4 but should anyway be reevaluated in connection with the definition
  of the function derived-term for the weighthed automata.

* "check" algorithm
There should be a means to check that the invariants are verifired.  A
separate algorithm would do.  In particular check the alphabet, that
the special letter labels the initial and final transitions etc.

* edit-automaton
Currently it converts the \e in initial/final labels to the
special-letter.  Is this what we want?

* check labels in mutable_automaton
Currently, we can add_transition(p, q, 'z') even if z is not part of
the alphabet.

No, we do not want mutable_expression to check anything, as it might
be used by sound algorithms which will never make such mistakes --- so
it would be a pessimization to check.  Rather check in tools such as
edit-automaton.

* debug compilation mode
crange should not feature size and empty if !VCSN_DEBUG.

* vcsn/alphabets/char.cc
  char_letters::special_letter(...) is protected and
  set_alpha<T>::add_letter(...) (in file vcsn/alphabets/setalpha.hh)
  need it.

* mutable_automaton::set_transition
We should find a means to forbid transition from pre to post.  This
was the case initially, but it is a useless constraint in aut-to-exp.
Maybe it should be efforced only in non labels_are_unit case.

* automata: handle with shared_ptr
One would really like to have a transpose_automaton that is able to
build its underlying automaton.  This means that using a const& to
keep the original automaton is not the best model: pointers would be
better.  But then there are issues with memory tracking, issues that
we already know how to handle thanks to shared_ptr.

* compilation jit
Well, you know what I mean.

* char.hh:
choose bw "word_t w", and const&.

* move files around
The hierarchy and the namespaces do not match.

* have a consuming version of conv()
The conversion function of weights currently takes a string and returns
a weight.  It would be convenient to have a conversion that is equivalent
to the >> operator: i.e., it reads the leading weight, and return the rest.
(Should we use a stream-based interface or an iterator-based interface?)
Similar conversion functions should be made available for labels.

This is especially important when parsing weights with a recursive
structure (e.g., polynomials or rational expressions).  For instance
in

              while (labelset()->has(i.peek()))
                label += char(i.get());

polynomialset::conv() wrongly assumes that letters are represented by
characters.  This will break with integer alphabets.

* should polynomial honor the kind?
Currently polynomials maps words to weights.  However when polynomial
are used to represent entries of a LAL automaton, it would make sense
to map only letters to weights.  Can this be useful elsewhere?

Local Variables:
mode: outline
End:
